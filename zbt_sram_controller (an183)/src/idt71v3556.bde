SCHM0103

HEADER
{
 FREEID 841
 VARIABLES
 {
  #ARCHITECTURE="rtl"
  #BLOCKTABLE_FILE="#HDL2DIAGRAM.bde"
  #ENTITY="idt71v3556"
  #LANGUAGE="VHDL"
  AUTHOR="ParazZzit"
  COMPANY="admin"
  CREATIONDATE="12.05.2016"
  SOURCE=".\\src\\idt71v3556.vhd"
 }
}

PAGE ""
{
 PAGEHEADER
 {
  PAGESIZE (3522,3351)
  MARGINS (200,200,200,200)
  RECT (0,0,0,0)
 }
 
 BODY
 {
  VHDLDESIGNUNITHDR  1, 0, 0
  {
   LABEL "Design Unit Header"
   TEXT 
"library controller;\n"+
"        use controller.gen_utils.all;\n"+
"        use controller.conversions.all;\n"+
"library ieee;\n"+
"        use ieee.std_logic_1164.all;\n"+
"        use ieee.vital_timing.all;\n"+
"        use ieee.vital_primitives.all;\n"+
"        use controller.conversions.all;"
   RECT (220,260,620,637)
   MARGINS (20,20)
   MULTILINE
   SYNTAXCOLORED
   SHOWLABEL
   SHOWTEXT
   CORNER 10
  }
  ENTITYDECLARATION  2, 0, 0
  {
   LABEL "Entity Declaration"
   TEXT "attribute VITAL_LEVEL0 of idt71v3556 : entity is TRUE;"
   RECT (220,637,620,783)
   MARGINS (20,20)
   MULTILINE
   SYNTAXCOLORED
   SHOWLABEL
   SHOWTEXT
   CORNER 10
  }
  ARCHITECTUREDECLARATIONS  3, 0, 0
  {
   LABEL "Architecture Declaration"
   TEXT 
"attribute VITAL_LEVEL0 of rtl : architecture is TRUE;\n"+
"constant partID : STRING := \"idt71v3156\";\n"+
""
   RECT (220,783,620,995)
   MARGINS (20,20)
   MULTILINE
   SYNTAXCOLORED
   SHOWLABEL
   SHOWTEXT
   CORNER 10
  }
  GENERIC  4, 0, 0
  {
   LABEL "Generics"
   TEXT 
"InstancePath:STRING:=DefaultInstancePath;\n"+
"MsgOn:BOOLEAN:=DefaultMsgOn;\n"+
"SeverityMode:SEVERITY_LEVEL:=WARNING;\n"+
"thold_A0_CLK:VitalDelayType:=UnitDelay;\n"+
"thold_ADV_CLK:VitalDelayType:=UnitDelay;\n"+
"thold_BWANeg_CLK:VitalDelayType:=UnitDelay;\n"+
"thold_CE2_CLK:VitalDelayType:=UnitDelay;\n"+
"thold_CLKENNeg_CLK:VitalDelayType:=UnitDelay;\n"+
"thold_DQA0_CLK:VitalDelayType:=UnitDelay;\n"+
"thold_R_CLK:VitalDelayType:=UnitDelay;\n"+
"TimingChecksOn:BOOLEAN:=DefaultTimingChecks;\n"+
"TimingModel:STRING:=DefaultTimingModel;\n"+
"tipd_A0:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_A1:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_A10:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_A11:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_A12:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_A13:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_A14:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_A15:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_A2:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_A3:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_A4:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_A5:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_A6:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_A7:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_A8:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_A9:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_ADV:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_BWANeg:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_BWBNeg:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_BWCNeg:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_BWDNeg:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_CE1Neg:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_CE2:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_CE2Neg:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_CLK:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_CLKENNeg:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_DQA0:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_DQA1:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_DQA2:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_DQA3:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_DQB0:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_DQB1:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_DQB2:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_DQB3:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_DQC0:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_DQC1:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_DQC2:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_DQC3:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_DQD0:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_DQD1:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_DQD2:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_DQD3:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_LBONeg:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_OENeg:VitalDelayType01:=VitalZeroDelay01;\n"+
"tipd_R:VitalDelayType01:=VitalZeroDelay01;\n"+
"tpd_CLK_DQA0:VitalDelayType01Z:=UnitDelay01Z;\n"+
"tpd_OENeg_DQA0:VitalDelayType01Z:=UnitDelay01Z;\n"+
"tperiod_CLK_posedge:VitalDelayType:=UnitDelay;\n"+
"tpw_CLK_negedge:VitalDelayType:=UnitDelay;\n"+
"tpw_CLK_posedge:VitalDelayType:=UnitDelay;\n"+
"tsetup_A0_CLK:VitalDelayType:=UnitDelay;\n"+
"tsetup_ADV_CLK:VitalDelayType:=UnitDelay;\n"+
"tsetup_BWANeg_CLK:VitalDelayType:=UnitDelay;\n"+
"tsetup_CE2_CLK:VitalDelayType:=UnitDelay;\n"+
"tsetup_CLKENNeg_CLK:VitalDelayType:=UnitDelay;\n"+
"tsetup_DQA0_CLK:VitalDelayType:=UnitDelay;\n"+
"tsetup_R_CLK:VitalDelayType:=UnitDelay;\n"+
"XOn:BOOLEAN:=DefaultXon"
   RECT (220,1068,620,1395)
   MARGINS (20,20)
   MULTILINE
   SYNTAXCOLORED
   SHOWLABEL
   SHOWTEXT
   CORNER 10
  }
  SIGNALASSIGN  5, 0, 0
  {
   LABEL "WireDelay"
   TEXT 
"WireDelay: block is\n"+
"                       begin\n"+
"                         w_1 : VitalWireDelay(A0_ipd,A0,tipd_A0);\n"+
"                         w_2 : VitalWireDelay(A1_ipd,A1,tipd_A1);\n"+
"                         w_3 : VitalWireDelay(A2_ipd,A2,tipd_A2);\n"+
"                         w_4 : VitalWireDelay(A3_ipd,A3,tipd_A3);\n"+
"                         w_5 : VitalWireDelay(A4_ipd,A4,tipd_A4);\n"+
"                         w_6 : VitalWireDelay(A5_ipd,A5,tipd_A5);\n"+
"                         w_7 : VitalWireDelay(A6_ipd,A6,tipd_A6);\n"+
"                         w_8 : VitalWireDelay(A7_ipd,A7,tipd_A7);\n"+
"                         w_9 : VitalWireDelay(A8_ipd,A8,tipd_A8);\n"+
"                         w_10 : VitalWireDelay(A9_ipd,A9,tipd_A9);\n"+
"                         w_11 : VitalWireDelay(A10_ipd,A10,tipd_A10);\n"+
"                         w_12 : VitalWireDelay(A11_ipd,A11,tipd_A11);\n"+
"                         w_13 : VitalWireDelay(A12_ipd,A12,tipd_A12);\n"+
"                         w_14 : VitalWireDelay(A13_ipd,A13,tipd_A13);\n"+
"                         w_15 : VitalWireDelay(A14_ipd,A14,tipd_A14);\n"+
"                         w_16 : VitalWireDelay(A15_ipd,A15,tipd_A15);\n"+
"                         w_21 : VitalWireDelay(DQA0_ipd,DQA0,tipd_DQA0);\n"+
"                         w_22 : VitalWireDelay(DQA1_ipd,DQA1,tipd_DQA1);\n"+
"                         w_23 : VitalWireDelay(DQA2_ipd,DQA2,tipd_DQA2);\n"+
"                         w_24 : VitalWireDelay(DQA3_ipd,DQA3,tipd_DQA3);\n"+
"                         w_31 : VitalWireDelay(DQB0_ipd,DQB0,tipd_DQB0);\n"+
"                         w_32 : VitalWireDelay(DQB1_ipd,DQB1,tipd_DQB1);\n"+
"                         w_33 : VitalWireDelay(DQB2_ipd,DQB2,tipd_DQB2);\n"+
"                         w_34 : VitalWireDelay(DQB3_ipd,DQB3,tipd_DQB3);\n"+
"                         w_41 : VitalWireDelay(DQC0_ipd,DQC0,tipd_DQC0);\n"+
"                         w_42 : VitalWireDelay(DQC1_ipd,DQC1,tipd_DQC1);\n"+
"                         w_43 : VitalWireDelay(DQC2_ipd,DQC2,tipd_DQC2);\n"+
"                         w_44 : VitalWireDelay(DQC3_ipd,DQC3,tipd_DQC3);\n"+
"                         w_51 : VitalWireDelay(DQD0_ipd,DQD0,tipd_DQD0);\n"+
"                         w_52 : VitalWireDelay(DQD1_ipd,DQD1,tipd_DQD1);\n"+
"                         w_53 : VitalWireDelay(DQD2_ipd,DQD2,tipd_DQD2);\n"+
"                         w_54 : VitalWireDelay(DQD3_ipd,DQD3,tipd_DQD3);\n"+
"                         w_61 : VitalWireDelay(ADV_ipd,ADV,tipd_ADV);\n"+
"                         w_62 : VitalWireDelay(R_ipd,R,tipd_R);\n"+
"                         w_63 : VitalWireDelay(CLKENNeg_ipd,CLKENNeg,tipd_CLKENNeg);\n"+
"                         w_64 : VitalWireDelay(BWDNeg_ipd,BWDNeg,tipd_BWDNeg);\n"+
"                         w_65 : VitalWireDelay(BWCNeg_ipd,BWCNeg,tipd_BWCNeg);\n"+
"                         w_66 : VitalWireDelay(BWBNeg_ipd,BWBNeg,tipd_BWBNeg);\n"+
"                         w_67 : VitalWireDelay(BWANeg_ipd,BWANeg,tipd_BWANeg);\n"+
"                         w_68 : VitalWireDelay(CE1Neg_ipd,CE1Neg,tipd_CE1Neg);\n"+
"                         w_69 : VitalWireDelay(CE2Neg_ipd,CE2Neg,tipd_CE2Neg);\n"+
"                         w_70 : VitalWireDelay(CE2_ipd,CE2,tipd_CE2);\n"+
"                         w_71 : VitalWireDelay(CLK_ipd,CLK,tipd_CLK);\n"+
"                         w_72 : VitalWireDelay(LBONeg_ipd,LBONeg,tipd_LBONeg);\n"+
"                         w_73 : VitalWireDelay(OENeg_ipd,OENeg,tipd_OENeg);\n"+
"                       end block WireDelay;\n"+
"                      "
   RECT (1620,1140,2021,2080)
   MARGINS (20,20)
   SYNTAXCOLORED
   SHOWLABEL
   SHOWTEXT
   CORNER 10
   VTX (  255, 259, 263, 267, 271, 275, 279, 283, 287, 291, 295, 299, 303, 307, 311, 315, 320, 323, 328, 332, 336, 340, 343, 351, 355, 359, 363, 367, 371, 375, 379, 383, 387, 391, 395, 399, 407, 415, 419, 427, 439, 447, 455, 463, 471, 475, 480, 483, 488, 491, 499, 507, 515, 519, 523, 531, 535, 539, 543, 547, 551, 555, 559, 563, 567, 571, 575, 579, 583, 587, 595, 603, 611, 623, 631, 639, 647, 651, 663, 671, 675, 687, 691, 699, 707, 715, 727, 731, 743, 747 )
  }
  INSTANCE  6, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="A0"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,1160)
   VERTEXES ( (2,476) )
  }
  INSTANCE  7, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="A1"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,1240)
   VERTEXES ( (2,591) )
  }
  INSTANCE  8, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="A10"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,1200)
   VERTEXES ( (2,479) )
  }
  INSTANCE  9, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="A11"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,1320)
   VERTEXES ( (2,615) )
  }
  INSTANCE  10, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="A12"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,1400)
   VERTEXES ( (2,635) )
  }
  INSTANCE  11, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="A13"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,1460)
   VERTEXES ( (2,599) )
  }
  INSTANCE  12, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="A14"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,1280)
   VERTEXES ( (2,484) )
  }
  INSTANCE  13, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="A15"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,1520)
   VERTEXES ( (2,655) )
  }
  SIGNALASSIGN  14, 0, 0
  {
   LABEL "Behavior"
   TEXT 
"Behavior: block is\n"+
"                         port (BWDNIn : IN std_ulogic := 'U';\n"+
"                               BWCNIn : IN std_ulogic := 'U';\n"+
"                               BWBNIn : IN std_ulogic := 'U';\n"+
"                               BWANIn : IN std_ulogic := 'U';\n"+
"                               DatDIn : IN std_logic_vector(3 downto 0);\n"+
"                               DatCIn : IN std_logic_vector(3 downto 0);\n"+
"                               DatBIn : IN std_logic_vector(3 downto 0);\n"+
"                               DatAIn : IN std_logic_vector(3 downto 0);\n"+
"                               DataOut : OUT std_logic_vector(15 downto 0) := (others => 'Z');\n"+
"                               CLKIn : IN std_ulogic := 'U';\n"+
"                               CKENIn : IN std_ulogic := 'U';\n"+
"                               AddressIn : IN std_logic_vector(15 downto 0);\n"+
"                               OENegIn : IN std_ulogic := 'U';\n"+
"                               RIn : IN std_ulogic := 'U';\n"+
"                               ADVIn : IN std_ulogic := 'U';\n"+
"                               CE2In : IN std_ulogic := 'U';\n"+
"                               LBONegIn : IN std_ulogic := '1';\n"+
"                               CE1NegIn : IN std_ulogic := 'U';\n"+
"                               CE2NegIn : IN std_ulogic := 'U');\n"+
"                         port map (BWDNIn => BWDNeg_ipd,\n"+
"                                   BWCNIn => BWCNeg_ipd,\n"+
"                                   BWBNIn => BWBNeg_ipd,\n"+
"                                   BWANIn => BWANeg_ipd,\n"+
"                                   CLKIn => CLK_ipd,\n"+
"                                   CKENIn => CLKENNeg_ipd,\n"+
"                                   OENegIn => OENeg_ipd,\n"+
"                                   RIn => R_ipd,\n"+
"                                   ADVIn => ADV_ipd,\n"+
"                                   CE2In => CE2_ipd,\n"+
"                                   LBONegIn => LBONeg_ipd,\n"+
"                                   CE1NegIn => CE1Neg_ipd,\n"+
"                                   CE2NegIn => CE2Neg_ipd,\n"+
"                                   DataOut(0) => DQA0,\n"+
"                                   DataOut(1) => DQA1,\n"+
"                                   DataOut(2) => DQA2,\n"+
"                                   DataOut(3) => DQA3,\n"+
"                                   DataOut(4) => DQB0,\n"+
"                                   DataOut(5) => DQB1,\n"+
"                                   DataOut(6) => DQB2,\n"+
"                                   DataOut(7) => DQB3,\n"+
"                                   DataOut(8) => DQC0,\n"+
"                                   DataOut(9) => DQC1,\n"+
"                                   DataOut(10) => DQC2,\n"+
"                                   DataOut(11) => DQC3,\n"+
"                                   DataOut(12) => DQD0,\n"+
"                                   DataOut(13) => DQD1,\n"+
"                                   DataOut(14) => DQD2,\n"+
"                                   DataOut(15) => DQD3,\n"+
"                                   DatAIn(0) => DQA0_ipd,\n"+
"                                   DatAIn(1) => DQA1_ipd,\n"+
"                                   DatAIn(2) => DQA2_ipd,\n"+
"                                   DatAIn(3) => DQA3_ipd,\n"+
"                                   DatBIn(0) => DQB0_ipd,\n"+
"                                   DatBIn(1) => DQB1_ipd,\n"+
"                                   DatBIn(2) => DQB2_ipd,\n"+
"                                   DatBIn(3) => DQB3_ipd,\n"+
"                                   DatCIn(0) => DQC0_ipd,\n"+
"                                   DatCIn(1) => DQC1_ipd,\n"+
"                                   DatCIn(2) => DQC2_ipd,\n"+
"                                   DatCIn(3) => DQC3_ipd,\n"+
"                                   DatDIn(0) => DQD0_ipd,\n"+
"                                   DatDIn(1) => DQD1_ipd,\n"+
"                                   DatDIn(2) => DQD2_ipd,\n"+
"                                   DatDIn(3) => DQD3_ipd,\n"+
"                                   AddressIn(0) => A0_ipd,\n"+
"                                   AddressIn(1) => A1_ipd,\n"+
"                                   AddressIn(2) => A2_ipd,\n"+
"                                   AddressIn(3) => A3_ipd,\n"+
"                                   AddressIn(4) => A4_ipd,\n"+
"                                   AddressIn(5) => A5_ipd,\n"+
"                                   AddressIn(6) => A6_ipd,\n"+
"                                   AddressIn(7) => A7_ipd,\n"+
"                                   AddressIn(8) => A8_ipd,\n"+
"                                   AddressIn(9) => A9_ipd,\n"+
"                                   AddressIn(10) => A10_ipd,\n"+
"                                   AddressIn(11) => A11_ipd,\n"+
"                                   AddressIn(12) => A12_ipd,\n"+
"                                   AddressIn(13) => A13_ipd,\n"+
"                                   AddressIn(14) => A14_ipd,\n"+
"                                   AddressIn(15) => A15_ipd);\n"+
"                         type mem_state is (desel, begin_rd, begin_wr, burst_rd, burst_wr);\n"+
"                         signal state : mem_state;\n"+
"                         type sequence is array (0 to 3) of INTEGER range - 3 to 3;\n"+
"                         type seqtab is array (0 to 3) of sequence;\n"+
"                         constant il0 : sequence := (0,1,2,3);\n"+
"                         constant il1 : sequence := (0,- 1,2,1);\n"+
"                         constant il2 : sequence := (0,1,- 2,- 1);\n"+
"                         constant il3 : sequence := (0,- 1,- 2,- 3);\n"+
"                         constant il : seqtab := (il0,il1,il2,il3);\n"+
"                         constant ln0 : sequence := (0,1,2,3);\n"+
"                         constant ln1 : sequence := (0,1,2,- 1);\n"+
"                         constant ln2 : sequence := (0,1,- 2,- 1);\n"+
"                         constant ln3 : sequence := (0,- 3,- 2,- 1);\n"+
"                         constant ln : seqtab := (ln0,ln1,ln2,ln3);\n"+
"                         signal Burst_Seq : seqtab;\n"+
"                         signal D_zd : std_logic_vector(15 downto 0);\n"+
"                       begin\n"+
"                         Burst_Setup : process\n"+
"                         begin\n"+
"                           if (LBONegIn = '1') then\n"+
"                              Burst_Seq <= il;\n"+
"                           else \n"+
"                              Burst_Seq <= ln;\n"+
"                           end if;\n"+
"                           wait;\n"+
"                         end process;\n"+
"                         Behavior : process (BWDNIn,BWCNIn,BWBNIn,BWANIn,DatDIn,DatCIn,DatBIn,DatAIn,CLKIn,CKENIn,AddressIn,RIn,OENegIn,ADVIn,CE2In,CE1NegIn,CE2NegIn)\n"+
"                           type command_type is (ds, burst, read, write);\n"+
"                           variable Tviol_BWDN_CLK : X01 := '0';\n"+
"                           variable TD_BWDN_CLK : VitalTimingDataType;\n"+
"                           variable Tviol_BWCN_CLK : X01 := '0';\n"+
"                           variable TD_BWCN_CLK : VitalTimingDataType;\n"+
"                           variable Tviol_BWBN_CLK : X01 := '0';\n"+
"                           variable TD_BWBN_CLK : VitalTimingDataType;\n"+
"                           variable Tviol_BWAN_CLK : X01 := '0';\n"+
"                           variable TD_BWAN_CLK : VitalTimingDataType;\n"+
"                           variable Tviol_CKENIn_CLK : X01 := '0';\n"+
"                           variable TD_CKENIn_CLK : VitalTimingDataType;\n"+
"                           variable Tviol_ADVIn_CLK : X01 := '0';\n"+
"                           variable TD_ADVIn_CLK : VitalTimingDataType;\n"+
"                           variable Tviol_CE1NegIn_CLK : X01 := '0';\n"+
"                           variable TD_CE1NegIn_CLK : VitalTimingDataType;\n"+
"                           variable Tviol_CE2NegIn_CLK : X01 := '0';\n"+
"                           variable TD_CE2NegIn_CLK : VitalTimingDataType;\n"+
"                           variable Tviol_CE2In_CLK : X01 := '0';\n"+
"                           variable TD_CE2In_CLK : VitalTimingDataType;\n"+
"                           variable Tviol_RIn_CLK : X01 := '0';\n"+
"                           variable TD_RIn_CLK : VitalTimingDataType;\n"+
"                           variable Tviol_DatDIn_CLK : X01 := '0';\n"+
"                           variable TD_DatDIn_CLK : VitalTimingDataType;\n"+
"                           variable Tviol_DatCIn_CLK : X01 := '0';\n"+
"                           variable TD_DatCIn_CLK : VitalTimingDataType;\n"+
"                           variable Tviol_DatBIn_CLK : X01 := '0';\n"+
"                           variable TD_DatBIn_CLK : VitalTimingDataType;\n"+
"                           variable Tviol_DatAIn_CLK : X01 := '0';\n"+
"                           variable TD_DatAIn_CLK : VitalTimingDataType;\n"+
"                           variable Tviol_AddressIn_CLK : X01 := '0';\n"+
"                           variable TD_AddressIn_CLK : VitalTimingDataType;\n"+
"                           variable Pviol_CLK : X01 := '0';\n"+
"                           variable PD_CLK : VitalPeriodDataType := VitalPeriodDataInit;\n"+
"                           type MemStore is array (0 to 64726) of INTEGER range - 2 to 511;\n"+
"                           variable MemDataA : MemStore;\n"+
"                           variable MemDataB : MemStore;\n"+
"                           variable MemDataC : MemStore;\n"+
"                           variable MemDataD : MemStore;\n"+
"                           variable MemAddr : NATURAL range 0 to 64726;\n"+
"                           variable MemAddr1 : NATURAL range 0 to 64726;\n"+
"                           variable startaddr : NATURAL range 0 to 64726;\n"+
"                           variable Burst_Cnt : NATURAL range 0 to 4 := 0;\n"+
"                           variable memstart : NATURAL range 0 to 3 := 0;\n"+
"                           variable offset : INTEGER range - 3 to 3 := 0;\n"+
"                           variable command : command_type;\n"+
"                           variable BWD1 : UX01;\n"+
"                           variable BWC1 : UX01;\n"+
"                           variable BWB1 : UX01;\n"+
"                           variable BWA1 : UX01;\n"+
"                           variable BWD2 : UX01;\n"+
"                           variable BWC2 : UX01;\n"+
"                           variable BWB2 : UX01;\n"+
"                           variable BWA2 : UX01;\n"+
"                           variable wr1 : BOOLEAN := false;\n"+
"                           variable wr2 : BOOLEAN := false;\n"+
"                           variable wr3 : BOOLEAN := false;\n"+
"                           variable Violation : X01 := '0';\n"+
"                           variable OBuf1 : std_logic_vector(15 downto 0) := (others => 'Z');\n"+
"                           variable OBuf2 : std_logic_vector(15 downto 0) := (others => 'Z');\n"+
"                         begin\n"+
"                           if (TimingChecksOn) then\n"+
"                              VitalSetupHoldCheck(TestSignal => BWDNIn,TestSignalName => \"BWD\",RefSignal => CLKIn,RefSignalName => \"CLK\",SetupHigh => tsetup_BWANeg_CLK,SetupLow => tsetup_BWANeg_CLK,HoldHigh => thold_BWANeg_CLK,HoldLow => thold_BWANeg_CLK,CheckEnabled => (CKENIn = '0'),RefTransition => '/',HeaderMsg => InstancePath & partID,TimingData => TD_BWDN_CLK,XOn => XOn,MsgOn => MsgOn,Violation => Tviol_BWDN_CLK);\n"+
"                              VitalSetupHoldCheck(TestSignal => BWCNIn,TestSignalName => \"BWC\",RefSignal => CLKIn,RefSignalName => \"CLK\",SetupHigh => tsetup_BWANeg_CLK,SetupLow => tsetup_BWANeg_CLK,HoldHigh => thold_BWANeg_CLK,HoldLow => thold_BWANeg_CLK,CheckEnabled => (CKENIn = '0'),RefTransition => '/',HeaderMsg => InstancePath & partID,TimingData => TD_BWCN_CLK,XOn => XOn,MsgOn => MsgOn,Violation => Tviol_BWCN_CLK);\n"+
"                              VitalSetupHoldCheck(TestSignal => BWBNIn,TestSignalName => \"BWB\",RefSignal => CLKIn,RefSignalName => \"CLK\",SetupHigh => tsetup_BWANeg_CLK,SetupLow => tsetup_BWANeg_CLK,HoldHigh => thold_BWANeg_CLK,HoldLow => thold_BWANeg_CLK,CheckEnabled => (CKENIn = '0'),RefTransition => '/',HeaderMsg => InstancePath & partID,TimingData => TD_BWBN_CLK,XOn => XOn,MsgOn => MsgOn,Violation => Tviol_BWBN_CLK);\n"+
"                              VitalSetupHoldCheck(TestSignal => BWANIn,TestSignalName => \"BWA\",RefSignal => CLKIn,RefSignalName => \"CLK\",SetupHigh => tsetup_BWANeg_CLK,SetupLow => tsetup_BWANeg_CLK,HoldHigh => thold_BWANeg_CLK,HoldLow => thold_BWANeg_CLK,CheckEnabled => (CKENIn = '0'),RefTransition => '/',HeaderMsg => InstancePath & partID,TimingData => TD_BWAN_CLK,XOn => XOn,MsgOn => MsgOn,Violation => Tviol_BWAN_CLK);\n"+
"                              VitalSetupHoldCheck(TestSignal => CKENIn,TestSignalName => \"CLKENNeg\",RefSignal => CLKIn,RefSignalName => \"CLK\",SetupHigh => tsetup_CLKENNeg_CLK,SetupLow => tsetup_CLKENNeg_CLK,HoldHigh => thold_CLKENNeg_CLK,HoldLow => thold_CLKENNeg_CLK,CheckEnabled => TRUE,RefTransition => '/',HeaderMsg => InstancePath & partID,TimingData => TD_CKENIn_CLK,XOn => XOn,MsgOn => MsgOn,Violation => Tviol_CKENIn_CLK);\n"+
"                              VitalSetupHoldCheck(TestSignal => ADVIn,TestSignalName => \"ADV\",RefSignal => CLKIn,RefSignalName => \"CLK\",SetupHigh => tsetup_ADV_CLK,SetupLow => tsetup_ADV_CLK,HoldHigh => thold_ADV_CLK,HoldLow => thold_ADV_CLK,CheckEnabled => (CKENIn = '0'),RefTransition => '/',HeaderMsg => InstancePath & partID,TimingData => TD_ADVIn_CLK,XOn => XOn,MsgOn => MsgOn,Violation => Tviol_ADVIn_CLK);\n"+
"                              VitalSetupHoldCheck(TestSignal => CE1NegIn,TestSignalName => \"CE1Neg\",RefSignal => CLKIn,RefSignalName => \"CLK\",SetupHigh => tsetup_CE2_CLK,SetupLow => tsetup_CE2_CLK,HoldHigh => thold_CE2_CLK,HoldLow => thold_CE2_CLK,CheckEnabled => (CKENIn = '0'),RefTransition => '/',HeaderMsg => InstancePath & partID,TimingData => TD_CE1NegIn_CLK,XOn => XOn,MsgOn => MsgOn,Violation => Tviol_CE1NegIn_CLK);\n"+
"                              VitalSetupHoldCheck(TestSignal => CE2NegIn,TestSignalName => \"CE2Neg\",RefSignal => CLKIn,RefSignalName => \"CLK\",SetupHigh => tsetup_CE2_CLK,SetupLow => tsetup_CE2_CLK,HoldHigh => thold_CE2_CLK,HoldLow => thold_CE2_CLK,CheckEnabled => (CKENIn = '0'),RefTransition => '/',HeaderMsg => InstancePath & partID,TimingData => TD_CE2NegIn_CLK,XOn => XOn,MsgOn => MsgOn,Violation => Tviol_CE2NegIn_CLK);\n"+
"                              VitalSetupHoldCheck(TestSignal => CE2In,TestSignalName => \"CE2\",RefSignal => CLKIn,RefSignalName => \"CLK\",SetupHigh => tsetup_CE2_CLK,SetupLow => tsetup_CE2_CLK,HoldHigh => thold_CE2_CLK,HoldLow => thold_CE2_CLK,CheckEnabled => (CKENIn = '0'),RefTransition => '/',HeaderMsg => InstancePath & partID,TimingData => TD_CE2In_CLK,XOn => XOn,MsgOn => MsgOn,Violation => Tviol_CE2In_CLK);\n"+
"                              VitalSetupHoldCheck(TestSignal => RIn,TestSignalName => \"R\",RefSignal => CLKIn,RefSignalName => \"CLK\",SetupHigh => tsetup_R_CLK,SetupLow => tsetup_R_CLK,HoldHigh => thold_R_CLK,HoldLow => thold_R_CLK,CheckEnabled => (CKENIn = '0'),RefTransition => '/',HeaderMsg => InstancePath & partID,TimingData => TD_RIn_CLK,XOn => XOn,MsgOn => MsgOn,Violation => Tviol_RIn_CLK);\n"+
"                              VitalSetupHoldCheck(TestSignal => AddressIn,TestSignalName => \"Address\",RefSignal => CLKIn,RefSignalName => \"CLK\",SetupHigh => tsetup_A0_CLK,SetupLow => tsetup_A0_CLK,HoldHigh => thold_A0_CLK,HoldLow => thold_A0_CLK,CheckEnabled => (CKENIn = '0'),RefTransition => '/',HeaderMsg => InstancePath & partID,TimingData => TD_AddressIn_CLK,XOn => XOn,MsgOn => MsgOn,Violation => Tviol_AddressIn_CLK);\n"+
"                              VitalSetupHoldCheck(TestSignal => DatDIn,TestSignalName => \"DatD\",RefSignal => CLKIn,RefSignalName => \"CLK\",SetupHigh => tsetup_DQA0_CLK,SetupLow => tsetup_DQA0_CLK,HoldHigh => thold_DQA0_CLK,HoldLow => thold_DQA0_CLK,CheckEnabled => (CKENIn = '0'),RefTransition => '/',HeaderMsg => InstancePath & partID,TimingData => TD_DatDIn_CLK,XOn => XOn,MsgOn => MsgOn,Violation => Tviol_DatDIn_CLK);\n"+
"                              VitalSetupHoldCheck(TestSignal => DatCIn,TestSignalName => \"DatC\",RefSignal => CLKIn,RefSignalName => \"CLK\",SetupHigh => tsetup_DQA0_CLK,SetupLow => tsetup_DQA0_CLK,HoldHigh => thold_DQA0_CLK,HoldLow => thold_DQA0_CLK,CheckEnabled => (CKENIn = '0'),RefTransition => '/',HeaderMsg => InstancePath & partID,TimingData => TD_DatCIn_CLK,XOn => XOn,MsgOn => MsgOn,Violation => Tviol_DatCIn_CLK);\n"+
"                              VitalSetupHoldCheck(TestSignal => DatBIn,TestSignalName => \"DatB\",RefSignal => CLKIn,RefSignalName => \"CLK\",SetupHigh => tsetup_DQA0_CLK,SetupLow => tsetup_DQA0_CLK,HoldHigh => thold_DQA0_CLK,HoldLow => thold_DQA0_CLK,CheckEnabled => (CKENIn = '0'),RefTransition => '/',HeaderMsg => InstancePath & partID,TimingData => TD_DatBIn_CLK,XOn => XOn,MsgOn => MsgOn,Violation => Tviol_DatBIn_CLK);\n"+
"                              VitalSetupHoldCheck(TestSignal => DatAIn,TestSignalName => \"DatA\",RefSignal => CLKIn,RefSignalName => \"CLK\",SetupHigh => tsetup_DQA0_CLK,SetupLow => tsetup_DQA0_CLK,HoldHigh => thold_DQA0_CLK,HoldLow => thold_DQA0_CLK,CheckEnabled => (CKENIn = '0'),RefTransition => '/',HeaderMsg => InstancePath & partID,TimingData => TD_DatAIn_CLK,XOn => XOn,MsgOn => MsgOn,Violation => Tviol_DatAIn_CLK);\n"+
"                              VitalPeriodPulseCheck(TestSignal => CLKIn,TestSignalName => \"CLK\",Period => tperiod_CLK_posedge,PulseWidthLow => tpw_CLK_negedge,PulseWidthHigh => tpw_CLK_posedge,PeriodData => PD_CLK,XOn => XOn,MsgOn => MsgOn,Violation => Pviol_CLK,HeaderMsg => InstancePath & partID,CheckEnabled => (CKENIn = '0'));\n"+
"                              Violation := Pviol_CLK or Tviol_DatAIn_CLK or Tviol_DatBIn_CLK or Tviol_DatCIn_CLK or Tviol_DatDIn_CLK or Tviol_AddressIn_CLK or Tviol_RIn_CLK or Tviol_CE2In_CLK or Tviol_CE2NegIn_CLK or Tviol_CE1NegIn_CLK or Tviol_ADVIn_CLK or Tviol_CKENIn_CLK or Tviol_BWAN_CLK or Tviol_BWBN_CLK or Tviol_BWCN_CLK or Tviol_BWDN_CLK;\n"+
"                              assert Violation = '0' report InstancePath & partID & \": simulation may be\" & \" inaccurate due to timing violations\" severity SeverityMode;\n"+
"                           end if;\n"+
"                           if (rising_edge(CLKIn) and CKENIn = '0') then\n"+
"                              assert (not (Is_X(BWDNIn))) report InstancePath & partID & \": Unusable value for BWDN\" severity SeverityMode;\n"+
"                              assert (not (Is_X(BWCNIn))) report InstancePath & partID & \": Unusable value for BWCN\" severity SeverityMode;\n"+
"                              assert (not (Is_X(BWBNIn))) report InstancePath & partID & \": Unusable value for BWBN\" severity SeverityMode;\n"+
"                              assert (not (Is_X(BWANIn))) report InstancePath & partID & \": Unusable value for BWAN\" severity SeverityMode;\n"+
"                              assert (not (Is_X(RIn))) report InstancePath & partID & \": Unusable value for R\" severity SeverityMode;\n"+
"                              assert (not (Is_X(ADVIn))) report InstancePath & partID & \": Unusable value for ADV\" severity SeverityMode;\n"+
"                              assert (not (Is_X(CE2In))) report InstancePath & partID & \": Unusable value for CE2\" severity SeverityMode;\n"+
"                              assert (not (Is_X(CE1NegIn))) report InstancePath & partID & \": Unusable value for CE1Neg\" severity SeverityMode;\n"+
"                              assert (not (Is_X(CE2NegIn))) report InstancePath & partID & \": Unusable value for CE2Neg\" severity SeverityMode;\n"+
"                              if ((ADVIn = '0') and (CE1NegIn = '1' or CE2NegIn = '1' or CE2In = '0')) then\n"+
"                                 command := ds;\n"+
"                              elsif (CE1NegIn = '0' and CE2NegIn = '0' and CE2In = '1' and ADVIn = '0') then\n"+
"                                 if (RIn = '1') then\n"+
"                                    command := read;\n"+
"                                 else \n"+
"                                    command := write;\n"+
"                                 end if;\n"+
"                              elsif (ADVIn = '1') and (CE1NegIn = '0' and CE2NegIn = '0' and CE2In = '1') then\n"+
"                                 command := burst;\n"+
"                              else \n"+
"                                 assert false report InstancePath & partID & \": Could not decode \" & \"command.\" severity SeverityMode;\n"+
"                              end if;\n"+
"                              wr3 := wr2;\n"+
"                              wr2 := wr1;\n"+
"                              wr1 := false;\n"+
"                              if (wr3) then\n"+
"                                 if (BWA2 = '0') then\n"+
"                                    if Violation = 'X' then\n"+
"                                       MemDataA(MemAddr1) := - 1;\n"+
"                                    else \n"+
"                                       MemDataA(MemAddr1) := to_nat(DatAIn);\n"+
"                                    end if;\n"+
"                                 end if;\n"+
"                                 if (BWB2 = '0') then\n"+
"                                    if Violation = 'X' then\n"+
"                                       MemDataB(MemAddr1) := - 1;\n"+
"                                    else \n"+
"                                       MemDataB(MemAddr1) := to_nat(DatBIn);\n"+
"                                    end if;\n"+
"                                 end if;\n"+
"                                 if (BWC2 = '0') then\n"+
"                                    if Violation = 'X' then\n"+
"                                       MemDataC(MemAddr1) := - 1;\n"+
"                                    else \n"+
"                                       MemDataC(MemAddr1) := to_nat(DatCIn);\n"+
"                                    end if;\n"+
"                                 end if;\n"+
"                                 if (BWD2 = '0') then\n"+
"                                    if Violation = 'X' then\n"+
"                                       MemDataD(MemAddr1) := - 1;\n"+
"                                    else \n"+
"                                       MemDataD(MemAddr1) := to_nat(DatDIn);\n"+
"                                    end if;\n"+
"                                 end if;\n"+
"                              end if;\n"+
"                              MemAddr1 := MemAddr;\n"+
"                              OBuf2 := OBuf1;\n"+
"                              case state is \n"+
"                                when desel => \n"+
"                                   case command is \n"+
"                                     when ds => \n"+
"                                        OBuf1 := (others => 'Z');\n"+
"                                     when read => \n"+
"                                        state <= begin_rd;\n"+
"                                        MemAddr := to_nat(AddressIn);\n"+
"                                        startaddr := MemAddr;\n"+
"                                        memstart := to_nat(AddressIn(1 downto 0));\n"+
"                                        if MemDataA(MemAddr) = - 2 then\n"+
"                                           OBuf1(3 downto 0) := (others => 'U');\n"+
"                                        elsif MemDataA(MemAddr) = - 1 then\n"+
"                                           OBuf1(3 downto 0) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(3 downto 0) := to_slv(MemDataA(MemAddr),9);\n"+
"                                        end if;\n"+
"                                        if MemDataB(MemAddr) = - 2 then\n"+
"                                           OBuf1(7 downto 4) := (others => 'U');\n"+
"                                        elsif MemDataB(MemAddr) = - 1 then\n"+
"                                           OBuf1(7 downto 4) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(7 downto 4) := to_slv(MemDataB(MemAddr),9);\n"+
"                                        end if;\n"+
"                                        if MemDataC(MemAddr) = - 2 then\n"+
"                                           OBuf1(11 downto 8) := (others => 'U');\n"+
"                                        elsif MemDataC(MemAddr) = - 1 then\n"+
"                                           OBuf1(11 downto 8) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(11 downto 8) := to_slv(MemDataC(MemAddr),9);\n"+
"                                        end if;\n"+
"                                        if MemDataD(MemAddr) = - 2 then\n"+
"                                           OBuf1(15 downto 12) := (others => 'U');\n"+
"                                        elsif MemDataD(MemAddr) = - 1 then\n"+
"                                           OBuf1(15 downto 12) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(15 downto 12) := to_slv(MemDataD(MemAddr),9);\n"+
"                                        end if;\n"+
"                                     when write => \n"+
"                                        state <= begin_wr;\n"+
"                                        MemAddr := to_nat(AddressIn);\n"+
"                                        startaddr := MemAddr;\n"+
"                                        memstart := to_nat(AddressIn(1 downto 0));\n"+
"                                        OBuf1 := (others => 'Z');\n"+
"                                        BWA1 := BWANIn;\n"+
"                                        BWB1 := BWBNIn;\n"+
"                                        BWC1 := BWCNIn;\n"+
"                                        BWD1 := BWDNIn;\n"+
"                                        wr1 := TRUE;\n"+
"                                     when burst => \n"+
"                                        OBuf1 := (others => 'Z');\n"+
"                                   end case;\n"+
"                                when begin_rd => \n"+
"                                   Burst_Cnt := 0;\n"+
"                                   case command is \n"+
"                                     when ds => \n"+
"                                        state <= desel;\n"+
"                                        OBuf1 := (others => 'Z');\n"+
"                                     when read => \n"+
"                                        state <= begin_rd;\n"+
"                                        MemAddr := to_nat(AddressIn);\n"+
"                                        startaddr := MemAddr;\n"+
"                                        memstart := to_nat(AddressIn(1 downto 0));\n"+
"                                        if MemDataA(MemAddr) = - 2 then\n"+
"                                           OBuf1(3 downto 0) := (others => 'U');\n"+
"                                        elsif MemDataA(MemAddr) = - 1 then\n"+
"                                           OBuf1(3 downto 0) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(3 downto 0) := to_slv(MemDataA(MemAddr),9);\n"+
"                                        end if;\n"+
"                                        if MemDataB(MemAddr) = - 2 then\n"+
"                                           OBuf1(7 downto 4) := (others => 'U');\n"+
"                                        elsif MemDataB(MemAddr) = - 1 then\n"+
"                                           OBuf1(7 downto 4) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(7 downto 4) := to_slv(MemDataB(MemAddr),9);\n"+
"                                        end if;\n"+
"                                        if MemDataC(MemAddr) = - 2 then\n"+
"                                           OBuf1(11 downto 8) := (others => 'U');\n"+
"                                        elsif MemDataC(MemAddr) = - 1 then\n"+
"                                           OBuf1(11 downto 8) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(11 downto 8) := to_slv(MemDataC(MemAddr),9);\n"+
"                                        end if;\n"+
"                                        if MemDataD(MemAddr) = - 2 then\n"+
"                                           OBuf1(15 downto 12) := (others => 'U');\n"+
"                                        elsif MemDataD(MemAddr) = - 1 then\n"+
"                                           OBuf1(15 downto 12) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(15 downto 12) := to_slv(MemDataD(MemAddr),9);\n"+
"                                        end if;\n"+
"                                     when write => \n"+
"                                        state <= begin_wr;\n"+
"                                        MemAddr := to_nat(AddressIn);\n"+
"                                        startaddr := MemAddr;\n"+
"                                        memstart := to_nat(AddressIn(1 downto 0));\n"+
"                                        OBuf1 := (others => 'Z');\n"+
"                                        BWA1 := BWANIn;\n"+
"                                        BWB1 := BWBNIn;\n"+
"                                        BWC1 := BWCNIn;\n"+
"                                        BWD1 := BWDNIn;\n"+
"                                        wr1 := TRUE;\n"+
"                                     when burst => \n"+
"                                        state <= burst_rd;\n"+
"                                        Burst_Cnt := Burst_Cnt + 1;\n"+
"                                        if (Burst_Cnt = 4) then\n"+
"                                           Burst_Cnt := 0;\n"+
"                                        end if;\n"+
"                                        offset := Burst_Seq(memstart)(Burst_Cnt);\n"+
"                                        MemAddr := startaddr + offset;\n"+
"                                        if MemDataA(MemAddr) = - 2 then\n"+
"                                           OBuf1(3 downto 0) := (others => 'U');\n"+
"                                        elsif MemDataA(MemAddr) = - 1 then\n"+
"                                           OBuf1(3 downto 0) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(3 downto 0) := to_slv(MemDataA(MemAddr),9);\n"+
"                                        end if;\n"+
"                                        if MemDataB(MemAddr) = - 2 then\n"+
"                                           OBuf1(7 downto 4) := (others => 'U');\n"+
"                                        elsif MemDataB(MemAddr) = - 1 then\n"+
"                                           OBuf1(7 downto 4) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(7 downto 4) := to_slv(MemDataB(MemAddr),9);\n"+
"                                        end if;\n"+
"                                        if MemDataC(MemAddr) = - 2 then\n"+
"                                           OBuf1(11 downto 8) := (others => 'U');\n"+
"                                        elsif MemDataC(MemAddr) = - 1 then\n"+
"                                           OBuf1(11 downto 8) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(11 downto 8) := to_slv(MemDataC(MemAddr),9);\n"+
"                                        end if;\n"+
"                                        if MemDataD(MemAddr) = - 2 then\n"+
"                                           OBuf1(15 downto 12) := (others => 'U');\n"+
"                                        elsif MemDataD(MemAddr) = - 1 then\n"+
"                                           OBuf1(15 downto 12) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(15 downto 12) := to_slv(MemDataD(MemAddr),9);\n"+
"                                        end if;\n"+
"                                   end case;\n"+
"                                when begin_wr => \n"+
"                                   BWA2 := BWA1;\n"+
"                                   BWB2 := BWB1;\n"+
"                                   BWC2 := BWC1;\n"+
"                                   BWD2 := BWD1;\n"+
"                                   Burst_Cnt := 0;\n"+
"                                   case command is \n"+
"                                     when ds => \n"+
"                                        state <= desel;\n"+
"                                        OBuf1 := (others => 'Z');\n"+
"                                     when read => \n"+
"                                        state <= begin_rd;\n"+
"                                        MemAddr := to_nat(AddressIn);\n"+
"                                        startaddr := MemAddr;\n"+
"                                        memstart := to_nat(AddressIn(1 downto 0));\n"+
"                                        if MemDataA(MemAddr) = - 2 then\n"+
"                                           OBuf1(3 downto 0) := (others => 'U');\n"+
"                                        elsif MemDataA(MemAddr) = - 1 then\n"+
"                                           OBuf1(3 downto 0) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(3 downto 0) := to_slv(MemDataA(MemAddr),9);\n"+
"                                        end if;\n"+
"                                        if MemDataB(MemAddr) = - 2 then\n"+
"                                           OBuf1(7 downto 4) := (others => 'U');\n"+
"                                        elsif MemDataB(MemAddr) = - 1 then\n"+
"                                           OBuf1(7 downto 4) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(7 downto 4) := to_slv(MemDataB(MemAddr),9);\n"+
"                                        end if;\n"+
"                                        if MemDataC(MemAddr) = - 2 then\n"+
"                                           OBuf1(11 downto 8) := (others => 'U');\n"+
"                                        elsif MemDataC(MemAddr) = - 1 then\n"+
"                                           OBuf1(11 downto 8) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(11 downto 8) := to_slv(MemDataC(MemAddr),9);\n"+
"                                        end if;\n"+
"                                        if MemDataD(MemAddr) = - 2 then\n"+
"                                           OBuf1(15 downto 12) := (others => 'U');\n"+
"                                        elsif MemDataD(MemAddr) = - 1 then\n"+
"                                           OBuf1(15 downto 12) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(15 downto 12) := to_slv(MemDataD(MemAddr),9);\n"+
"                                        end if;\n"+
"                                     when write => \n"+
"                                        state <= begin_wr;\n"+
"                                        MemAddr := to_nat(AddressIn);\n"+
"                                        startaddr := MemAddr;\n"+
"                                        OBuf1 := (others => 'Z');\n"+
"                                        BWA1 := BWANIn;\n"+
"                                        BWB1 := BWBNIn;\n"+
"                                        BWC1 := BWCNIn;\n"+
"                                        BWD1 := BWDNIn;\n"+
"                                        wr1 := TRUE;\n"+
"                                     when burst => \n"+
"                                        state <= burst_wr;\n"+
"                                        Burst_Cnt := Burst_Cnt + 1;\n"+
"                                        if (Burst_Cnt = 4) then\n"+
"                                           Burst_Cnt := 0;\n"+
"                                        end if;\n"+
"                                        offset := Burst_Seq(memstart)(Burst_Cnt);\n"+
"                                        MemAddr := startaddr + offset;\n"+
"                                        BWA1 := BWANIn;\n"+
"                                        BWB1 := BWBNIn;\n"+
"                                        BWC1 := BWCNIn;\n"+
"                                        BWD1 := BWDNIn;\n"+
"                                        wr1 := TRUE;\n"+
"                                   end case;\n"+
"                                when burst_rd => \n"+
"                                   case command is \n"+
"                                     when ds => \n"+
"                                        state <= desel;\n"+
"                                        OBuf1 := (others => 'Z');\n"+
"                                     when read => \n"+
"                                        state <= begin_rd;\n"+
"                                        MemAddr := to_nat(AddressIn);\n"+
"                                        startaddr := MemAddr;\n"+
"                                        memstart := to_nat(AddressIn(1 downto 0));\n"+
"                                        if MemDataA(MemAddr) = - 2 then\n"+
"                                           OBuf1(3 downto 0) := (others => 'U');\n"+
"                                        elsif MemDataA(MemAddr) = - 1 then\n"+
"                                           OBuf1(3 downto 0) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(3 downto 0) := to_slv(MemDataA(MemAddr),9);\n"+
"                                        end if;\n"+
"                                        if MemDataB(MemAddr) = - 2 then\n"+
"                                           OBuf1(7 downto 4) := (others => 'U');\n"+
"                                        elsif MemDataB(MemAddr) = - 1 then\n"+
"                                           OBuf1(7 downto 4) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(7 downto 4) := to_slv(MemDataB(MemAddr),9);\n"+
"                                        end if;\n"+
"                                        if MemDataC(MemAddr) = - 2 then\n"+
"                                           OBuf1(11 downto 8) := (others => 'U');\n"+
"                                        elsif MemDataC(MemAddr) = - 1 then\n"+
"                                           OBuf1(11 downto 8) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(11 downto 8) := to_slv(MemDataC(MemAddr),9);\n"+
"                                        end if;\n"+
"                                        if MemDataD(MemAddr) = - 2 then\n"+
"                                           OBuf1(15 downto 12) := (others => 'U');\n"+
"                                        elsif MemDataD(MemAddr) = - 1 then\n"+
"                                           OBuf1(15 downto 12) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(15 downto 12) := to_slv(MemDataD(MemAddr),9);\n"+
"                                        end if;\n"+
"                                     when write => \n"+
"                                        state <= begin_wr;\n"+
"                                        MemAddr := to_nat(AddressIn);\n"+
"                                        startaddr := MemAddr;\n"+
"                                        memstart := to_nat(AddressIn(1 downto 0));\n"+
"                                        OBuf1 := (others => 'Z');\n"+
"                                        BWA1 := BWANIn;\n"+
"                                        BWB1 := BWBNIn;\n"+
"                                        BWC1 := BWCNIn;\n"+
"                                        BWD1 := BWDNIn;\n"+
"                                        wr1 := TRUE;\n"+
"                                     when burst => \n"+
"                                        Burst_Cnt := Burst_Cnt + 1;\n"+
"                                        if (Burst_Cnt = 4) then\n"+
"                                           Burst_Cnt := 0;\n"+
"                                        end if;\n"+
"                                        offset := Burst_Seq(memstart)(Burst_Cnt);\n"+
"                                        MemAddr := startaddr + offset;\n"+
"                                        if MemDataA(MemAddr) = - 2 then\n"+
"                                           OBuf1(3 downto 0) := (others => 'U');\n"+
"                                        elsif MemDataA(MemAddr) = - 1 then\n"+
"                                           OBuf1(3 downto 0) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(3 downto 0) := to_slv(MemDataA(MemAddr),9);\n"+
"                                        end if;\n"+
"                                        if MemDataB(MemAddr) = - 2 then\n"+
"                                           OBuf1(7 downto 4) := (others => 'U');\n"+
"                                        elsif MemDataB(MemAddr) = - 1 then\n"+
"                                           OBuf1(7 downto 4) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(7 downto 4) := to_slv(MemDataB(MemAddr),9);\n"+
"                                        end if;\n"+
"                                        if MemDataC(MemAddr) = - 2 then\n"+
"                                           OBuf1(11 downto 8) := (others => 'U');\n"+
"                                        elsif MemDataC(MemAddr) = - 1 then\n"+
"                                           OBuf1(11 downto 8) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(11 downto 8) := to_slv(MemDataC(MemAddr),9);\n"+
"                                        end if;\n"+
"                                        if MemDataD(MemAddr) = - 2 then\n"+
"                                           OBuf1(15 downto 12) := (others => 'U');\n"+
"                                        elsif MemDataD(MemAddr) = - 1 then\n"+
"                                           OBuf1(15 downto 12) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(15 downto 12) := to_slv(MemDataD(MemAddr),9);\n"+
"                                        end if;\n"+
"                                   end case;\n"+
"                                when burst_wr => \n"+
"                                   case command is \n"+
"                                     when ds => \n"+
"                                        state <= desel;\n"+
"                                        OBuf1 := (others => 'Z');\n"+
"                                     when read => \n"+
"                                        state <= begin_rd;\n"+
"                                        MemAddr := to_nat(AddressIn);\n"+
"                                        startaddr := MemAddr;\n"+
"                                        memstart := to_nat(AddressIn(1 downto 0));\n"+
"                                        if MemDataA(MemAddr) = - 2 then\n"+
"                                           OBuf1(3 downto 0) := (others => 'U');\n"+
"                                        elsif MemDataA(MemAddr) = - 1 then\n"+
"                                           OBuf1(3 downto 0) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(3 downto 0) := to_slv(MemDataA(MemAddr),9);\n"+
"                                        end if;\n"+
"                                        if MemDataB(MemAddr) = - 2 then\n"+
"                                           OBuf1(7 downto 4) := (others => 'U');\n"+
"                                        elsif MemDataB(MemAddr) = - 1 then\n"+
"                                           OBuf1(7 downto 4) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(7 downto 4) := to_slv(MemDataB(MemAddr),9);\n"+
"                                        end if;\n"+
"                                        if MemDataC(MemAddr) = - 2 then\n"+
"                                           OBuf1(11 downto 8) := (others => 'U');\n"+
"                                        elsif MemDataC(MemAddr) = - 1 then\n"+
"                                           OBuf1(11 downto 8) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(11 downto 8) := to_slv(MemDataC(MemAddr),9);\n"+
"                                        end if;\n"+
"                                        if MemDataD(MemAddr) = - 2 then\n"+
"                                           OBuf1(15 downto 12) := (others => 'U');\n"+
"                                        elsif MemDataD(MemAddr) = - 1 then\n"+
"                                           OBuf1(15 downto 12) := (others => 'X');\n"+
"                                        else \n"+
"                                           OBuf1(15 downto 12) := to_slv(MemDataD(MemAddr),9);\n"+
"                                        end if;\n"+
"                                     when write => \n"+
"                                        state <= begin_wr;\n"+
"                                        MemAddr := to_nat(AddressIn);\n"+
"                                        startaddr := MemAddr;\n"+
"                                        memstart := to_nat(AddressIn(1 downto 0));\n"+
"                                        OBuf1 := (others => 'Z');\n"+
"                                        BWA1 := BWANIn;\n"+
"                                        BWB1 := BWBNIn;\n"+
"                                        BWC1 := BWCNIn;\n"+
"                                        BWD1 := BWDNIn;\n"+
"                                        wr1 := TRUE;\n"+
"                                     when burst => \n"+
"                                        Burst_Cnt := Burst_Cnt + 1;\n"+
"                                        if (Burst_Cnt = 4) then\n"+
"                                           Burst_Cnt := 0;\n"+
"                                        end if;\n"+
"                                        offset := Burst_Seq(memstart)(Burst_Cnt);\n"+
"                                        MemAddr := startaddr + offset;\n"+
"                                        BWA1 := BWANIn;\n"+
"                                        BWB1 := BWBNIn;\n"+
"                                        BWC1 := BWCNIn;\n"+
"                                        BWD1 := BWDNIn;\n"+
"                                        wr1 := TRUE;\n"+
"                                   end case;\n"+
"                              end case;\n"+
"                              if (OENegIn = '0') then\n"+
"                                 D_zd <= (others => 'Z'), OBuf2 after 1ns;\n"+
"                              end if;\n"+
"                           end if;\n"+
"                           if (OENegIn = '1') then\n"+
"                              D_zd <= (others => 'Z');\n"+
"                           else \n"+
"                              D_zd <= OBuf2;\n"+
"                           end if;\n"+
"                         end process;\n"+
"                         DataOutBlk : for i in 15 downto 0 generate\n"+
"                             DataOut_Delay : process (D_zd(i))\n"+
"                               variable D_GlitchData : VitalGlitchDataArrayType(15 downto 0);\n"+
"                             begin\n"+
"                               VitalPathDelay01Z(OutSignal => DataOut(i),OutSignalName => \"Data\",OutTemp => D_zd(i),Mode => VitalTransport,GlitchData => D_GlitchData(i),Paths => (1 => (InputChangeTime => CLKIn'LAST_EVENT,PathDelay => tpd_CLK_DQA0,PathCondition => OENegIn = '0'),2 => (InputChangeTime => OENegIn'LAST_EVENT,PathDelay => tpd_OENeg_DQA0,PathCondition => TRUE)));\n"+
"                             end process;\n"+
"                         end generate DataOutBlk;\n"+
"                       end block Behavior;\n"+
"                      "
   RECT (2240,1440,2641,1840)
   MARGINS (20,20)
   SYNTAXCOLORED
   SHOWLABEL
   SHOWTEXT
   CORNER 10
   VTX (  187, 316, 319, 324, 327, 331, 335, 339, 344, 347, 403, 411, 423, 431, 435, 443, 451, 459, 467 )
  }
  INSTANCE  15, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="A2"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,1580)
   VERTEXES ( (2,667) )
  }
  INSTANCE  16, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="A3"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,1640)
   VERTEXES ( (2,619) )
  }
  INSTANCE  17, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="A4"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,1360)
   VERTEXES ( (2,487) )
  }
  INSTANCE  18, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="A5"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,1700)
   VERTEXES ( (2,495) )
  }
  INSTANCE  19, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="A6"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,1760)
   VERTEXES ( (2,683) )
  }
  INSTANCE  20, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="A7"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,1820)
   VERTEXES ( (2,643) )
  }
  INSTANCE  21, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="A8"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,1880)
   VERTEXES ( (2,695) )
  }
  INSTANCE  22, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="A9"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,1940)
   VERTEXES ( (2,703) )
  }
  INSTANCE  23, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="ADV"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,2000)
   VERTEXES ( (2,607) )
  }
  INSTANCE  24, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="BWANeg"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,2060)
   VERTEXES ( (2,711) )
  }
  INSTANCE  25, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="BWBNeg"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,2120)
   VERTEXES ( (2,719) )
  }
  INSTANCE  26, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="BWCNeg"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,2180)
   VERTEXES ( (2,659) )
  }
  INSTANCE  27, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="BWDNeg"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,2240)
   VERTEXES ( (2,723) )
  }
  INSTANCE  28, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="CE1Neg"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,2300)
   VERTEXES ( (2,735) )
  }
  INSTANCE  29, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="CE2"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,2360)
   VERTEXES ( (2,679) )
  }
  INSTANCE  30, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="CE2Neg"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,2420)
   VERTEXES ( (2,739) )
  }
  INSTANCE  31, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="CLK"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,2480)
   VERTEXES ( (2,751) )
  }
  INSTANCE  32, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="CLKENNeg"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,2540)
   VERTEXES ( (2,627) )
  }
  INSTANCE  33, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Bidirectional"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="DQA0"
    #SYMBOL="Bidirectional"
    #VHDL_TYPE="std_logic"
   }
   COORD (3040,240)
   VERTEXES ( (2,251) )
  }
  INSTANCE  34, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Bidirectional"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="DQA1"
    #SYMBOL="Bidirectional"
    #VHDL_TYPE="std_logic"
   }
   COORD (3040,300)
   VERTEXES ( (2,247) )
  }
  INSTANCE  35, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Bidirectional"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="DQA2"
    #SYMBOL="Bidirectional"
    #VHDL_TYPE="std_logic"
   }
   COORD (3040,360)
   VERTEXES ( (2,243) )
  }
  INSTANCE  36, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Bidirectional"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="DQA3"
    #SYMBOL="Bidirectional"
    #VHDL_TYPE="std_logic"
   }
   COORD (3040,420)
   VERTEXES ( (2,239) )
  }
  INSTANCE  37, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Bidirectional"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="DQB0"
    #SYMBOL="Bidirectional"
    #VHDL_TYPE="std_logic"
   }
   COORD (3040,480)
   VERTEXES ( (2,235) )
  }
  INSTANCE  38, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Bidirectional"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="DQB1"
    #SYMBOL="Bidirectional"
    #VHDL_TYPE="std_logic"
   }
   COORD (3040,540)
   VERTEXES ( (2,231) )
  }
  INSTANCE  39, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Bidirectional"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="DQB2"
    #SYMBOL="Bidirectional"
    #VHDL_TYPE="std_logic"
   }
   COORD (3040,600)
   VERTEXES ( (2,227) )
  }
  INSTANCE  40, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Bidirectional"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="DQB3"
    #SYMBOL="Bidirectional"
    #VHDL_TYPE="std_logic"
   }
   COORD (3040,660)
   VERTEXES ( (2,223) )
  }
  INSTANCE  41, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Bidirectional"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="DQC0"
    #SYMBOL="Bidirectional"
    #VHDL_TYPE="std_logic"
   }
   COORD (3040,720)
   VERTEXES ( (2,219) )
  }
  INSTANCE  42, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Bidirectional"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="DQC1"
    #SYMBOL="Bidirectional"
    #VHDL_TYPE="std_logic"
   }
   COORD (3040,780)
   VERTEXES ( (2,215) )
  }
  INSTANCE  43, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Bidirectional"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="DQC2"
    #SYMBOL="Bidirectional"
    #VHDL_TYPE="std_logic"
   }
   COORD (3040,840)
   VERTEXES ( (2,211) )
  }
  INSTANCE  44, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Bidirectional"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="DQC3"
    #SYMBOL="Bidirectional"
    #VHDL_TYPE="std_logic"
   }
   COORD (3040,900)
   VERTEXES ( (2,207) )
  }
  INSTANCE  45, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Bidirectional"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="DQD0"
    #SYMBOL="Bidirectional"
    #VHDL_TYPE="std_logic"
   }
   COORD (3040,960)
   VERTEXES ( (2,203) )
  }
  INSTANCE  46, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Bidirectional"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="DQD1"
    #SYMBOL="Bidirectional"
    #VHDL_TYPE="std_logic"
   }
   COORD (3040,1020)
   VERTEXES ( (2,199) )
  }
  INSTANCE  47, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Bidirectional"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="DQD2"
    #SYMBOL="Bidirectional"
    #VHDL_TYPE="std_logic"
   }
   COORD (3040,1080)
   VERTEXES ( (2,195) )
  }
  INSTANCE  48, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Bidirectional"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="DQD3"
    #SYMBOL="Bidirectional"
    #VHDL_TYPE="std_logic"
   }
   COORD (3040,1460)
   VERTEXES ( (2,191) )
  }
  INSTANCE  49, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'1'"
    #LIBRARY="#terminals"
    #REFERENCE="LBONeg"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,2600)
   VERTEXES ( (2,503) )
  }
  INSTANCE  50, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="OENeg"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,2660)
   VERTEXES ( (2,511) )
  }
  INSTANCE  51, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="Input"
    #INITIAL_VALUE="'U'"
    #LIBRARY="#terminals"
    #REFERENCE="R"
    #SYMBOL="Input"
    #VHDL_TYPE="std_logic"
   }
   COORD (880,2720)
   VERTEXES ( (2,527) )
  }
  TEXT  52, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,1160,828,1160)
   ALIGN 6
   PARENT 6
  }
  TEXT  53, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,1240,828,1240)
   ALIGN 6
   PARENT 7
  }
  TEXT  54, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,1200,828,1200)
   ALIGN 6
   PARENT 8
  }
  TEXT  55, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,1320,828,1320)
   ALIGN 6
   PARENT 9
  }
  TEXT  56, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,1400,828,1400)
   ALIGN 6
   PARENT 10
  }
  TEXT  57, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,1460,828,1460)
   ALIGN 6
   PARENT 11
  }
  TEXT  58, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,1280,828,1280)
   ALIGN 6
   PARENT 12
  }
  TEXT  59, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,1520,828,1520)
   ALIGN 6
   PARENT 13
  }
  TEXT  60, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,1580,828,1580)
   ALIGN 6
   PARENT 15
  }
  TEXT  61, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,1640,828,1640)
   ALIGN 6
   PARENT 16
  }
  TEXT  62, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,1360,828,1360)
   ALIGN 6
   PARENT 17
  }
  TEXT  63, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,1700,828,1700)
   ALIGN 6
   PARENT 18
  }
  TEXT  64, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,1760,828,1760)
   ALIGN 6
   PARENT 19
  }
  TEXT  65, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,1820,828,1820)
   ALIGN 6
   PARENT 20
  }
  TEXT  66, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,1880,828,1880)
   ALIGN 6
   PARENT 21
  }
  TEXT  67, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,1940,828,1940)
   ALIGN 6
   PARENT 22
  }
  TEXT  68, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,2000,828,2000)
   ALIGN 6
   PARENT 23
  }
  TEXT  69, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,2060,828,2060)
   ALIGN 6
   PARENT 24
  }
  TEXT  70, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,2120,828,2120)
   ALIGN 6
   PARENT 25
  }
  TEXT  71, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,2180,828,2180)
   ALIGN 6
   PARENT 26
  }
  TEXT  72, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,2240,828,2240)
   ALIGN 6
   PARENT 27
  }
  TEXT  73, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,2300,828,2300)
   ALIGN 6
   PARENT 28
  }
  TEXT  74, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,2360,828,2360)
   ALIGN 6
   PARENT 29
  }
  TEXT  75, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,2420,828,2420)
   ALIGN 6
   PARENT 30
  }
  TEXT  76, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,2480,828,2480)
   ALIGN 6
   PARENT 31
  }
  TEXT  77, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,2540,828,2540)
   ALIGN 6
   PARENT 32
  }
  TEXT  78, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (3102,240,3102,240)
   ALIGN 4
   PARENT 33
  }
  TEXT  79, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (3102,300,3102,300)
   ALIGN 4
   PARENT 34
  }
  TEXT  80, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (3102,360,3102,360)
   ALIGN 4
   PARENT 35
  }
  TEXT  81, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (3102,420,3102,420)
   ALIGN 4
   PARENT 36
  }
  TEXT  82, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (3102,480,3102,480)
   ALIGN 4
   PARENT 37
  }
  TEXT  83, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (3102,540,3102,540)
   ALIGN 4
   PARENT 38
  }
  TEXT  84, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (3102,600,3102,600)
   ALIGN 4
   PARENT 39
  }
  TEXT  85, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (3102,660,3102,660)
   ALIGN 4
   PARENT 40
  }
  TEXT  86, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (3102,720,3102,720)
   ALIGN 4
   PARENT 41
  }
  TEXT  87, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (3102,780,3102,780)
   ALIGN 4
   PARENT 42
  }
  TEXT  88, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (3102,840,3102,840)
   ALIGN 4
   PARENT 43
  }
  TEXT  89, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (3102,900,3102,900)
   ALIGN 4
   PARENT 44
  }
  TEXT  90, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (3102,960,3102,960)
   ALIGN 4
   PARENT 45
  }
  TEXT  91, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (3102,1020,3102,1020)
   ALIGN 4
   PARENT 46
  }
  TEXT  92, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (3102,1080,3102,1080)
   ALIGN 4
   PARENT 47
  }
  TEXT  93, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (3102,1460,3102,1460)
   ALIGN 4
   PARENT 48
  }
  TEXT  94, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,2600,828,2600)
   ALIGN 6
   PARENT 49
  }
  TEXT  95, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,2660,828,2660)
   ALIGN 6
   PARENT 50
  }
  TEXT  96, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (828,2720,828,2720)
   ALIGN 6
   PARENT 51
  }
  NET WIRE  97, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQC2_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  98, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A7_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  99, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQB1_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  100, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A6_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  101, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A8_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  102, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A5_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  103, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQB0_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  104, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A4_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  105, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQD0_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  106, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A3_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  107, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A2_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  108, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQD1_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  109, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A1_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  110, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A9_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  111, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQD2_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  112, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A14_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  113, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQC1_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  114, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A13_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  115, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQA2_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  116, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A12_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  117, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQB2_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  118, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A11_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  119, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQA1_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  120, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A10_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  121, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQC0_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  122, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQA0_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  123, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A0_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  124, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQB2"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  125, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQB3"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  126, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQB1"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  127, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQB0"
    #VHDL_TYPE="std_logic"
   }
  }
  NET BUS  128, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQA3_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  129, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQA3"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  130, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQA2"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  131, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQA1"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  132, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQA0"
    #VHDL_TYPE="std_logic"
   }
  }
  NET BUS  133, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQB3_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  134, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQC0"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  135, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQC1"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  136, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQC2"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  137, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQC3"
    #VHDL_TYPE="std_logic"
   }
  }
  NET BUS  138, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQC3_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  139, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQD0"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  140, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQD1"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  141, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQD2"
    #VHDL_TYPE="std_logic"
   }
  }
  NET BUS  142, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQD3_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  143, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'1'"
    #NAME="LBONeg"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  144, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'1'"
    #NAME="LBONeg_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  145, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="OENeg"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  146, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="OENeg_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  147, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="R"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  148, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="R_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  149, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="ADV"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  150, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A9"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  151, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A8"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  152, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A7"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  153, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A6"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  154, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A5"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  155, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A4"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  156, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A3"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  157, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A2"
    #VHDL_TYPE="std_logic"
   }
  }
  NET BUS  158, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A15_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  159, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A15"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  160, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A14"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  161, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A13"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  162, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A12"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  163, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A11"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  164, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A10"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  165, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A1"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  166, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="A0"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  167, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="CLKENNeg_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  168, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="CLKENNeg"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  169, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="CLK_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  170, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="CLK"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  171, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="CE2Neg_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  172, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="CE2Neg"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  173, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="CE2_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  174, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="CE2"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  175, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="CE1Neg_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  176, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="CE1Neg"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  177, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="BWDNeg_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  178, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="BWDNeg"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  179, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="BWCNeg_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  180, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="BWCNeg"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  181, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="BWBNeg_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  182, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="BWBNeg"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  183, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="BWANeg_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET WIRE  184, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="BWANeg"
    #VHDL_TYPE="std_logic"
   }
  }
  NET WIRE  185, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="ADV_ipd"
    #VHDL_TYPE="std_ulogic"
   }
  }
  NET BUS  186, 0, 0
  {
   VARIABLES
   {
    #INITIAL_VALUE="'U'"
    #NAME="DQD3"
    #VHDL_TYPE="std_logic"
   }
  }
  VTX  187, 0, 0
  {
   COORD (2641,1460)
  }
  VTX  188, 0, 0
  {
   COORD (2720,1460)
  }
  BUS  189, 0, 0
  {
   NET 186
   VTX 187, 188
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  190, 0, 1
  {
   TEXT "$#NAME"
   RECT (2680,1460,2680,1460)
   ALIGN 9
   PARENT 189
  }
  VTX  191, 0, 0
  {
   COORD (3040,1460)
  }
  VTX  192, 0, 0
  {
   COORD (2720,1460)
  }
  BUS  193, 0, 0
  {
   NET 186
   VTX 191, 192
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  194, 0, 1
  {
   TEXT "$#NAME"
   RECT (2880,1460,2880,1460)
   ALIGN 9
   PARENT 193
  }
  VTX  195, 0, 0
  {
   COORD (3040,1080)
  }
  VTX  196, 0, 0
  {
   COORD (2740,1080)
  }
  WIRE  197, 0, 0
  {
   NET 141
   VTX 195, 196
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  198, 0, 1
  {
   TEXT "$#NAME"
   RECT (2890,1080,2890,1080)
   ALIGN 9
   PARENT 197
  }
  VTX  199, 0, 0
  {
   COORD (3040,1020)
  }
  VTX  200, 0, 0
  {
   COORD (2760,1020)
  }
  WIRE  201, 0, 0
  {
   NET 140
   VTX 199, 200
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  202, 0, 1
  {
   TEXT "$#NAME"
   RECT (2900,1020,2900,1020)
   ALIGN 9
   PARENT 201
  }
  VTX  203, 0, 0
  {
   COORD (3040,960)
  }
  VTX  204, 0, 0
  {
   COORD (2780,960)
  }
  WIRE  205, 0, 0
  {
   NET 139
   VTX 203, 204
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  206, 0, 1
  {
   TEXT "$#NAME"
   RECT (2910,960,2910,960)
   ALIGN 9
   PARENT 205
  }
  VTX  207, 0, 0
  {
   COORD (3040,900)
  }
  VTX  208, 0, 0
  {
   COORD (2800,900)
  }
  WIRE  209, 0, 0
  {
   NET 137
   VTX 207, 208
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  210, 0, 1
  {
   TEXT "$#NAME"
   RECT (2920,900,2920,900)
   ALIGN 9
   PARENT 209
  }
  VTX  211, 0, 0
  {
   COORD (3040,840)
  }
  VTX  212, 0, 0
  {
   COORD (2820,840)
  }
  WIRE  213, 0, 0
  {
   NET 136
   VTX 211, 212
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  214, 0, 1
  {
   TEXT "$#NAME"
   RECT (2930,840,2930,840)
   ALIGN 9
   PARENT 213
  }
  VTX  215, 0, 0
  {
   COORD (3040,780)
  }
  VTX  216, 0, 0
  {
   COORD (2840,780)
  }
  WIRE  217, 0, 0
  {
   NET 135
   VTX 215, 216
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  218, 0, 1
  {
   TEXT "$#NAME"
   RECT (2940,780,2940,780)
   ALIGN 9
   PARENT 217
  }
  VTX  219, 0, 0
  {
   COORD (3040,720)
  }
  VTX  220, 0, 0
  {
   COORD (2860,720)
  }
  WIRE  221, 0, 0
  {
   NET 134
   VTX 219, 220
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  222, 0, 1
  {
   TEXT "$#NAME"
   RECT (2950,720,2950,720)
   ALIGN 9
   PARENT 221
  }
  VTX  223, 0, 0
  {
   COORD (3040,660)
  }
  VTX  224, 0, 0
  {
   COORD (2880,660)
  }
  WIRE  225, 0, 0
  {
   NET 125
   VTX 223, 224
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  226, 0, 1
  {
   TEXT "$#NAME"
   RECT (2960,660,2960,660)
   ALIGN 9
   PARENT 225
  }
  VTX  227, 0, 0
  {
   COORD (3040,600)
  }
  VTX  228, 0, 0
  {
   COORD (2900,600)
  }
  WIRE  229, 0, 0
  {
   NET 124
   VTX 227, 228
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  230, 0, 1
  {
   TEXT "$#NAME"
   RECT (2970,600,2970,600)
   ALIGN 9
   PARENT 229
  }
  VTX  231, 0, 0
  {
   COORD (3040,540)
  }
  VTX  232, 0, 0
  {
   COORD (2920,540)
  }
  WIRE  233, 0, 0
  {
   NET 126
   VTX 231, 232
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  234, 0, 1
  {
   TEXT "$#NAME"
   RECT (2980,540,2980,540)
   ALIGN 9
   PARENT 233
  }
  VTX  235, 0, 0
  {
   COORD (3040,480)
  }
  VTX  236, 0, 0
  {
   COORD (2940,480)
  }
  WIRE  237, 0, 0
  {
   NET 127
   VTX 235, 236
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  238, 0, 1
  {
   TEXT "$#NAME"
   RECT (2990,480,2990,480)
   ALIGN 9
   PARENT 237
  }
  VTX  239, 0, 0
  {
   COORD (3040,420)
  }
  VTX  240, 0, 0
  {
   COORD (2960,420)
  }
  WIRE  241, 0, 0
  {
   NET 129
   VTX 239, 240
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  242, 0, 1
  {
   TEXT "$#NAME"
   RECT (3000,420,3000,420)
   ALIGN 9
   PARENT 241
  }
  VTX  243, 0, 0
  {
   COORD (3040,360)
  }
  VTX  244, 0, 0
  {
   COORD (2980,360)
  }
  WIRE  245, 0, 0
  {
   NET 130
   VTX 243, 244
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  246, 0, 1
  {
   TEXT "$#NAME"
   RECT (3010,360,3010,360)
   ALIGN 9
   PARENT 245
  }
  VTX  247, 0, 0
  {
   COORD (3040,300)
  }
  VTX  248, 0, 0
  {
   COORD (3000,300)
  }
  WIRE  249, 0, 0
  {
   NET 131
   VTX 247, 248
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  250, 0, 1
  {
   TEXT "$#NAME"
   RECT (3020,300,3020,300)
   ALIGN 9
   PARENT 249
  }
  VTX  251, 0, 0
  {
   COORD (3040,240)
  }
  VTX  252, 0, 0
  {
   COORD (3020,240)
  }
  WIRE  253, 0, 0
  {
   NET 132
   VTX 251, 252
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  254, 0, 1
  {
   TEXT "$#NAME"
   RECT (3030,240,3030,240)
   ALIGN 9
   PARENT 253
  }
  VTX  255, 0, 0
  {
   COORD (2021,1160)
  }
  VTX  256, 0, 0
  {
   COORD (2100,1160)
  }
  WIRE  257, 0, 0
  {
   NET 123
   VTX 255, 256
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  258, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1160,2060,1160)
   ALIGN 9
   PARENT 257
  }
  VTX  259, 0, 0
  {
   COORD (2021,1180)
  }
  VTX  260, 0, 0
  {
   COORD (2100,1180)
  }
  WIRE  261, 0, 0
  {
   NET 120
   VTX 259, 260
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  262, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1180,2060,1180)
   ALIGN 9
   PARENT 261
  }
  VTX  263, 0, 0
  {
   COORD (2021,1200)
  }
  VTX  264, 0, 0
  {
   COORD (2100,1200)
  }
  WIRE  265, 0, 0
  {
   NET 118
   VTX 263, 264
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  266, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1200,2060,1200)
   ALIGN 9
   PARENT 265
  }
  VTX  267, 0, 0
  {
   COORD (2021,1220)
  }
  VTX  268, 0, 0
  {
   COORD (2100,1220)
  }
  WIRE  269, 0, 0
  {
   NET 116
   VTX 267, 268
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  270, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1220,2060,1220)
   ALIGN 9
   PARENT 269
  }
  VTX  271, 0, 0
  {
   COORD (2021,1240)
  }
  VTX  272, 0, 0
  {
   COORD (2100,1240)
  }
  WIRE  273, 0, 0
  {
   NET 114
   VTX 271, 272
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  274, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1240,2060,1240)
   ALIGN 9
   PARENT 273
  }
  VTX  275, 0, 0
  {
   COORD (2021,1260)
  }
  VTX  276, 0, 0
  {
   COORD (2100,1260)
  }
  WIRE  277, 0, 0
  {
   NET 112
   VTX 275, 276
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  278, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1260,2060,1260)
   ALIGN 9
   PARENT 277
  }
  VTX  279, 0, 0
  {
   COORD (2021,1300)
  }
  VTX  280, 0, 0
  {
   COORD (2100,1300)
  }
  WIRE  281, 0, 0
  {
   NET 109
   VTX 279, 280
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  282, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1300,2060,1300)
   ALIGN 9
   PARENT 281
  }
  VTX  283, 0, 0
  {
   COORD (2021,1320)
  }
  VTX  284, 0, 0
  {
   COORD (2100,1320)
  }
  WIRE  285, 0, 0
  {
   NET 107
   VTX 283, 284
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  286, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1320,2060,1320)
   ALIGN 9
   PARENT 285
  }
  VTX  287, 0, 0
  {
   COORD (2021,1340)
  }
  VTX  288, 0, 0
  {
   COORD (2100,1340)
  }
  WIRE  289, 0, 0
  {
   NET 106
   VTX 287, 288
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  290, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1340,2060,1340)
   ALIGN 9
   PARENT 289
  }
  VTX  291, 0, 0
  {
   COORD (2021,1360)
  }
  VTX  292, 0, 0
  {
   COORD (2100,1360)
  }
  WIRE  293, 0, 0
  {
   NET 104
   VTX 291, 292
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  294, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1360,2060,1360)
   ALIGN 9
   PARENT 293
  }
  VTX  295, 0, 0
  {
   COORD (2021,1380)
  }
  VTX  296, 0, 0
  {
   COORD (2100,1380)
  }
  WIRE  297, 0, 0
  {
   NET 102
   VTX 295, 296
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  298, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1380,2060,1380)
   ALIGN 9
   PARENT 297
  }
  VTX  299, 0, 0
  {
   COORD (2021,1400)
  }
  VTX  300, 0, 0
  {
   COORD (2100,1400)
  }
  WIRE  301, 0, 0
  {
   NET 100
   VTX 299, 300
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  302, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1400,2060,1400)
   ALIGN 9
   PARENT 301
  }
  VTX  303, 0, 0
  {
   COORD (2021,1420)
  }
  VTX  304, 0, 0
  {
   COORD (2100,1420)
  }
  WIRE  305, 0, 0
  {
   NET 98
   VTX 303, 304
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  306, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1420,2060,1420)
   ALIGN 9
   PARENT 305
  }
  VTX  307, 0, 0
  {
   COORD (2021,1440)
  }
  VTX  308, 0, 0
  {
   COORD (2100,1440)
  }
  WIRE  309, 0, 0
  {
   NET 101
   VTX 307, 308
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  310, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1440,2060,1440)
   ALIGN 9
   PARENT 309
  }
  VTX  311, 0, 0
  {
   COORD (2021,1460)
  }
  VTX  312, 0, 0
  {
   COORD (2100,1460)
  }
  WIRE  313, 0, 0
  {
   NET 110
   VTX 311, 312
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  314, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1460,2060,1460)
   ALIGN 9
   PARENT 313
  }
  VTX  315, 0, 0
  {
   COORD (2021,1480)
  }
  VTX  316, 0, 0
  {
   COORD (2240,1480)
  }
  WIRE  317, 0, 0
  {
   NET 185
   VTX 315, 316
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  318, 0, 1
  {
   TEXT "$#NAME"
   RECT (2130,1480,2130,1480)
   ALIGN 9
   PARENT 317
  }
  VTX  319, 0, 0
  {
   COORD (2240,1500)
  }
  VTX  320, 0, 0
  {
   COORD (2021,1500)
  }
  WIRE  321, 0, 0
  {
   NET 183
   VTX 319, 320
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  322, 0, 1
  {
   TEXT "$#NAME"
   RECT (2130,1500,2130,1500)
   ALIGN 9
   PARENT 321
  }
  VTX  323, 0, 0
  {
   COORD (2021,1520)
  }
  VTX  324, 0, 0
  {
   COORD (2240,1520)
  }
  WIRE  325, 0, 0
  {
   NET 181
   VTX 323, 324
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  326, 0, 1
  {
   TEXT "$#NAME"
   RECT (2130,1520,2130,1520)
   ALIGN 9
   PARENT 325
  }
  VTX  327, 0, 0
  {
   COORD (2240,1540)
  }
  VTX  328, 0, 0
  {
   COORD (2021,1540)
  }
  WIRE  329, 0, 0
  {
   NET 179
   VTX 327, 328
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  330, 0, 1
  {
   TEXT "$#NAME"
   RECT (2130,1540,2130,1540)
   ALIGN 9
   PARENT 329
  }
  VTX  331, 0, 0
  {
   COORD (2240,1560)
  }
  VTX  332, 0, 0
  {
   COORD (2021,1560)
  }
  WIRE  333, 0, 0
  {
   NET 177
   VTX 331, 332
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  334, 0, 1
  {
   TEXT "$#NAME"
   RECT (2130,1560,2130,1560)
   ALIGN 9
   PARENT 333
  }
  VTX  335, 0, 0
  {
   COORD (2240,1580)
  }
  VTX  336, 0, 0
  {
   COORD (2021,1580)
  }
  WIRE  337, 0, 0
  {
   NET 175
   VTX 335, 336
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  338, 0, 1
  {
   TEXT "$#NAME"
   RECT (2130,1580,2130,1580)
   ALIGN 9
   PARENT 337
  }
  VTX  339, 0, 0
  {
   COORD (2240,1600)
  }
  VTX  340, 0, 0
  {
   COORD (2021,1600)
  }
  WIRE  341, 0, 0
  {
   NET 173
   VTX 339, 340
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  342, 0, 1
  {
   TEXT "$#NAME"
   RECT (2130,1600,2130,1600)
   ALIGN 9
   PARENT 341
  }
  VTX  343, 0, 0
  {
   COORD (2021,1620)
  }
  VTX  344, 0, 0
  {
   COORD (2240,1620)
  }
  WIRE  345, 0, 0
  {
   NET 171
   VTX 343, 344
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  346, 0, 1
  {
   TEXT "$#NAME"
   RECT (2130,1620,2130,1620)
   ALIGN 9
   PARENT 345
  }
  VTX  347, 0, 0
  {
   COORD (2240,1660)
  }
  VTX  348, 0, 0
  {
   COORD (2100,1660)
  }
  WIRE  349, 0, 0
  {
   NET 169
   VTX 347, 348
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  350, 0, 1
  {
   TEXT "$#NAME"
   RECT (2170,1660,2170,1660)
   ALIGN 9
   PARENT 349
  }
  VTX  351, 0, 0
  {
   COORD (2021,1640)
  }
  VTX  352, 0, 0
  {
   COORD (2100,1640)
  }
  WIRE  353, 0, 0
  {
   NET 169
   VTX 351, 352
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  354, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1640,2060,1640)
   ALIGN 9
   PARENT 353
  }
  VTX  355, 0, 0
  {
   COORD (2021,1680)
  }
  VTX  356, 0, 0
  {
   COORD (2100,1680)
  }
  WIRE  357, 0, 0
  {
   NET 122
   VTX 355, 356
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  358, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1680,2060,1680)
   ALIGN 9
   PARENT 357
  }
  VTX  359, 0, 0
  {
   COORD (2021,1700)
  }
  VTX  360, 0, 0
  {
   COORD (2100,1700)
  }
  WIRE  361, 0, 0
  {
   NET 119
   VTX 359, 360
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  362, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1700,2060,1700)
   ALIGN 9
   PARENT 361
  }
  VTX  363, 0, 0
  {
   COORD (2021,1720)
  }
  VTX  364, 0, 0
  {
   COORD (2100,1720)
  }
  WIRE  365, 0, 0
  {
   NET 115
   VTX 363, 364
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  366, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1720,2060,1720)
   ALIGN 9
   PARENT 365
  }
  VTX  367, 0, 0
  {
   COORD (2021,1760)
  }
  VTX  368, 0, 0
  {
   COORD (2100,1760)
  }
  WIRE  369, 0, 0
  {
   NET 103
   VTX 367, 368
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  370, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1760,2060,1760)
   ALIGN 9
   PARENT 369
  }
  VTX  371, 0, 0
  {
   COORD (2021,1780)
  }
  VTX  372, 0, 0
  {
   COORD (2100,1780)
  }
  WIRE  373, 0, 0
  {
   NET 99
   VTX 371, 372
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  374, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1780,2060,1780)
   ALIGN 9
   PARENT 373
  }
  VTX  375, 0, 0
  {
   COORD (2021,1800)
  }
  VTX  376, 0, 0
  {
   COORD (2100,1800)
  }
  WIRE  377, 0, 0
  {
   NET 117
   VTX 375, 376
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  378, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1800,2060,1800)
   ALIGN 9
   PARENT 377
  }
  VTX  379, 0, 0
  {
   COORD (2021,1840)
  }
  VTX  380, 0, 0
  {
   COORD (2100,1840)
  }
  WIRE  381, 0, 0
  {
   NET 121
   VTX 379, 380
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  382, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1840,2060,1840)
   ALIGN 9
   PARENT 381
  }
  VTX  383, 0, 0
  {
   COORD (2021,1860)
  }
  VTX  384, 0, 0
  {
   COORD (2100,1860)
  }
  WIRE  385, 0, 0
  {
   NET 113
   VTX 383, 384
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  386, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1860,2060,1860)
   ALIGN 9
   PARENT 385
  }
  VTX  387, 0, 0
  {
   COORD (2021,1880)
  }
  VTX  388, 0, 0
  {
   COORD (2100,1880)
  }
  WIRE  389, 0, 0
  {
   NET 97
   VTX 387, 388
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  390, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1880,2060,1880)
   ALIGN 9
   PARENT 389
  }
  VTX  391, 0, 0
  {
   COORD (2021,1920)
  }
  VTX  392, 0, 0
  {
   COORD (2100,1920)
  }
  WIRE  393, 0, 0
  {
   NET 105
   VTX 391, 392
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  394, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1920,2060,1920)
   ALIGN 9
   PARENT 393
  }
  VTX  395, 0, 0
  {
   COORD (2021,1940)
  }
  VTX  396, 0, 0
  {
   COORD (2100,1940)
  }
  WIRE  397, 0, 0
  {
   NET 108
   VTX 395, 396
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  398, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1940,2060,1940)
   ALIGN 9
   PARENT 397
  }
  VTX  399, 0, 0
  {
   COORD (2021,1960)
  }
  VTX  400, 0, 0
  {
   COORD (2100,1960)
  }
  WIRE  401, 0, 0
  {
   NET 111
   VTX 399, 400
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  402, 0, 1
  {
   TEXT "$#NAME"
   RECT (2060,1960,2060,1960)
   ALIGN 9
   PARENT 401
  }
  VTX  403, 0, 0
  {
   COORD (2240,1460)
  }
  VTX  404, 0, 0
  {
   COORD (2120,1460)
  }
  BUS  405, 0, 0
  {
   NET 158
   VTX 403, 404
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  406, 0, 1
  {
   TEXT "$#NAME"
   RECT (2180,1460,2180,1460)
   ALIGN 9
   PARENT 405
  }
  VTX  407, 0, 0
  {
   COORD (2021,1280)
  }
  VTX  408, 0, 0
  {
   COORD (2120,1280)
  }
  BUS  409, 0, 0
  {
   NET 158
   VTX 407, 408
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  410, 0, 1
  {
   TEXT "$#NAME"
   RECT (2070,1280,2070,1280)
   ALIGN 9
   PARENT 409
  }
  VTX  411, 0, 0
  {
   COORD (2240,1640)
  }
  VTX  412, 0, 0
  {
   COORD (2120,1640)
  }
  WIRE  413, 0, 0
  {
   NET 167
   VTX 411, 412
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  414, 0, 1
  {
   TEXT "$#NAME"
   RECT (2180,1640,2180,1640)
   ALIGN 9
   PARENT 413
  }
  VTX  415, 0, 0
  {
   COORD (2021,1660)
  }
  VTX  416, 0, 0
  {
   COORD (2120,1660)
  }
  WIRE  417, 0, 0
  {
   NET 167
   VTX 415, 416
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  418, 0, 1
  {
   TEXT "$#NAME"
   RECT (2070,1660,2070,1660)
   ALIGN 9
   PARENT 417
  }
  VTX  419, 0, 0
  {
   COORD (2021,1740)
  }
  VTX  420, 0, 0
  {
   COORD (2120,1740)
  }
  BUS  421, 0, 0
  {
   NET 128
   VTX 419, 420
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  422, 0, 1
  {
   TEXT "$#NAME"
   RECT (2070,1740,2070,1740)
   ALIGN 9
   PARENT 421
  }
  VTX  423, 0, 0
  {
   COORD (2240,1680)
  }
  VTX  424, 0, 0
  {
   COORD (2120,1680)
  }
  BUS  425, 0, 0
  {
   NET 128
   VTX 423, 424
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  426, 0, 1
  {
   TEXT "$#NAME"
   RECT (2180,1680,2180,1680)
   ALIGN 9
   PARENT 425
  }
  VTX  427, 0, 0
  {
   COORD (2021,2000)
  }
  VTX  428, 0, 0
  {
   COORD (2120,2000)
  }
  WIRE  429, 0, 0
  {
   NET 144
   VTX 427, 428
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  430, 0, 1
  {
   TEXT "$#NAME"
   RECT (2070,2000,2070,2000)
   ALIGN 9
   PARENT 429
  }
  VTX  431, 0, 0
  {
   COORD (2240,1760)
  }
  VTX  432, 0, 0
  {
   COORD (2120,1760)
  }
  WIRE  433, 0, 0
  {
   NET 144
   VTX 431, 432
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  434, 0, 1
  {
   TEXT "$#NAME"
   RECT (2180,1760,2180,1760)
   ALIGN 9
   PARENT 433
  }
  VTX  435, 0, 0
  {
   COORD (2240,1700)
  }
  VTX  436, 0, 0
  {
   COORD (2140,1700)
  }
  BUS  437, 0, 0
  {
   NET 133
   VTX 435, 436
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  438, 0, 1
  {
   TEXT "$#NAME"
   RECT (2190,1700,2190,1700)
   ALIGN 9
   PARENT 437
  }
  VTX  439, 0, 0
  {
   COORD (2021,1820)
  }
  VTX  440, 0, 0
  {
   COORD (2140,1820)
  }
  BUS  441, 0, 0
  {
   NET 133
   VTX 439, 440
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  442, 0, 1
  {
   TEXT "$#NAME"
   RECT (2080,1820,2080,1820)
   ALIGN 9
   PARENT 441
  }
  VTX  443, 0, 0
  {
   COORD (2240,1720)
  }
  VTX  444, 0, 0
  {
   COORD (2160,1720)
  }
  BUS  445, 0, 0
  {
   NET 138
   VTX 443, 444
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  446, 0, 1
  {
   TEXT "$#NAME"
   RECT (2200,1720,2200,1720)
   ALIGN 9
   PARENT 445
  }
  VTX  447, 0, 0
  {
   COORD (2021,1900)
  }
  VTX  448, 0, 0
  {
   COORD (2160,1900)
  }
  BUS  449, 0, 0
  {
   NET 138
   VTX 447, 448
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  450, 0, 1
  {
   TEXT "$#NAME"
   RECT (2090,1900,2090,1900)
   ALIGN 9
   PARENT 449
  }
  VTX  451, 0, 0
  {
   COORD (2240,1740)
  }
  VTX  452, 0, 0
  {
   COORD (2180,1740)
  }
  BUS  453, 0, 0
  {
   NET 142
   VTX 451, 452
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  454, 0, 1
  {
   TEXT "$#NAME"
   RECT (2210,1740,2210,1740)
   ALIGN 9
   PARENT 453
  }
  VTX  455, 0, 0
  {
   COORD (2021,1980)
  }
  VTX  456, 0, 0
  {
   COORD (2180,1980)
  }
  BUS  457, 0, 0
  {
   NET 142
   VTX 455, 456
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  458, 0, 1
  {
   TEXT "$#NAME"
   RECT (2100,1980,2100,1980)
   ALIGN 9
   PARENT 457
  }
  VTX  459, 0, 0
  {
   COORD (2240,1780)
  }
  VTX  460, 0, 0
  {
   COORD (2200,1780)
  }
  WIRE  461, 0, 0
  {
   NET 146
   VTX 459, 460
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  462, 0, 1
  {
   TEXT "$#NAME"
   RECT (2220,1780,2220,1780)
   ALIGN 9
   PARENT 461
  }
  VTX  463, 0, 0
  {
   COORD (2021,2020)
  }
  VTX  464, 0, 0
  {
   COORD (2200,2020)
  }
  WIRE  465, 0, 0
  {
   NET 146
   VTX 463, 464
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  466, 0, 1
  {
   TEXT "$#NAME"
   RECT (2110,2020,2110,2020)
   ALIGN 9
   PARENT 465
  }
  VTX  467, 0, 0
  {
   COORD (2240,1800)
  }
  VTX  468, 0, 0
  {
   COORD (2220,1800)
  }
  WIRE  469, 0, 0
  {
   NET 148
   VTX 467, 468
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  470, 0, 1
  {
   TEXT "$#NAME"
   RECT (2230,1800,2230,1800)
   ALIGN 9
   PARENT 469
  }
  VTX  471, 0, 0
  {
   COORD (2021,2040)
  }
  VTX  472, 0, 0
  {
   COORD (2220,2040)
  }
  WIRE  473, 0, 0
  {
   NET 148
   VTX 471, 472
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  474, 0, 1
  {
   TEXT "$#NAME"
   RECT (2120,2040,2120,2040)
   ALIGN 9
   PARENT 473
  }
  VTX  475, 0, 0
  {
   COORD (1620,1160)
  }
  VTX  476, 0, 0
  {
   COORD (880,1160)
  }
  WIRE  477, 0, 0
  {
   NET 166
   VTX 475, 476
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  478, 0, 1
  {
   TEXT "$#NAME"
   RECT (1250,1160,1250,1160)
   ALIGN 9
   PARENT 477
  }
  VTX  479, 0, 0
  {
   COORD (880,1200)
  }
  VTX  480, 0, 0
  {
   COORD (1620,1200)
  }
  WIRE  481, 0, 0
  {
   NET 164
   VTX 479, 480
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  482, 0, 1
  {
   TEXT "$#NAME"
   RECT (1250,1200,1250,1200)
   ALIGN 9
   PARENT 481
  }
  VTX  483, 0, 0
  {
   COORD (1620,1280)
  }
  VTX  484, 0, 0
  {
   COORD (880,1280)
  }
  WIRE  485, 0, 0
  {
   NET 160
   VTX 483, 484
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  486, 0, 1
  {
   TEXT "$#NAME"
   RECT (1250,1280,1250,1280)
   ALIGN 9
   PARENT 485
  }
  VTX  487, 0, 0
  {
   COORD (880,1360)
  }
  VTX  488, 0, 0
  {
   COORD (1620,1360)
  }
  WIRE  489, 0, 0
  {
   NET 155
   VTX 487, 488
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  490, 0, 1
  {
   TEXT "$#NAME"
   RECT (1250,1360,1250,1360)
   ALIGN 9
   PARENT 489
  }
  VTX  491, 0, 0
  {
   COORD (1620,1380)
  }
  VTX  492, 0, 0
  {
   COORD (1000,1380)
  }
  WIRE  493, 0, 0
  {
   NET 154
   VTX 491, 492
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  494, 0, 1
  {
   TEXT "$#NAME"
   RECT (1310,1380,1310,1380)
   ALIGN 9
   PARENT 493
  }
  VTX  495, 0, 0
  {
   COORD (880,1700)
  }
  VTX  496, 0, 0
  {
   COORD (1000,1700)
  }
  WIRE  497, 0, 0
  {
   NET 154
   VTX 495, 496
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  498, 0, 1
  {
   TEXT "$#NAME"
   RECT (940,1700,940,1700)
   ALIGN 9
   PARENT 497
  }
  VTX  499, 0, 0
  {
   COORD (1620,2000)
  }
  VTX  500, 0, 0
  {
   COORD (1000,2000)
  }
  WIRE  501, 0, 0
  {
   NET 143
   VTX 499, 500
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  502, 0, 1
  {
   TEXT "$#NAME"
   RECT (1310,2000,1310,2000)
   ALIGN 9
   PARENT 501
  }
  VTX  503, 0, 0
  {
   COORD (880,2600)
  }
  VTX  504, 0, 0
  {
   COORD (1000,2600)
  }
  WIRE  505, 0, 0
  {
   NET 143
   VTX 503, 504
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  506, 0, 1
  {
   TEXT "$#NAME"
   RECT (940,2600,940,2600)
   ALIGN 9
   PARENT 505
  }
  VTX  507, 0, 0
  {
   COORD (1620,1980)
  }
  VTX  508, 0, 0
  {
   COORD (1020,1980)
  }
  BUS  509, 0, 0
  {
   NET 186
   VTX 507, 508
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  510, 0, 1
  {
   TEXT "$#NAME"
   RECT (1320,1980,1320,1980)
   ALIGN 9
   PARENT 509
  }
  VTX  511, 0, 0
  {
   COORD (880,2660)
  }
  VTX  512, 0, 0
  {
   COORD (1020,2660)
  }
  WIRE  513, 0, 0
  {
   NET 145
   VTX 511, 512
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  514, 0, 1
  {
   TEXT "$#NAME"
   RECT (950,2660,950,2660)
   ALIGN 9
   PARENT 513
  }
  VTX  515, 0, 0
  {
   COORD (1620,2020)
  }
  VTX  516, 0, 0
  {
   COORD (1020,2020)
  }
  WIRE  517, 0, 0
  {
   NET 145
   VTX 515, 516
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  518, 0, 1
  {
   TEXT "$#NAME"
   RECT (1320,2020,1320,2020)
   ALIGN 9
   PARENT 517
  }
  VTX  519, 0, 0
  {
   COORD (1620,1960)
  }
  VTX  520, 0, 0
  {
   COORD (1040,1960)
  }
  WIRE  521, 0, 0
  {
   NET 141
   VTX 519, 520
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  522, 0, 1
  {
   TEXT "$#NAME"
   RECT (1330,1960,1330,1960)
   ALIGN 9
   PARENT 521
  }
  VTX  523, 0, 0
  {
   COORD (1620,2040)
  }
  VTX  524, 0, 0
  {
   COORD (1040,2040)
  }
  WIRE  525, 0, 0
  {
   NET 147
   VTX 523, 524
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  526, 0, 1
  {
   TEXT "$#NAME"
   RECT (1330,2040,1330,2040)
   ALIGN 9
   PARENT 525
  }
  VTX  527, 0, 0
  {
   COORD (880,2720)
  }
  VTX  528, 0, 0
  {
   COORD (1040,2720)
  }
  WIRE  529, 0, 0
  {
   NET 147
   VTX 527, 528
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  530, 0, 1
  {
   TEXT "$#NAME"
   RECT (960,2720,960,2720)
   ALIGN 9
   PARENT 529
  }
  VTX  531, 0, 0
  {
   COORD (1620,1940)
  }
  VTX  532, 0, 0
  {
   COORD (1060,1940)
  }
  WIRE  533, 0, 0
  {
   NET 140
   VTX 531, 532
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  534, 0, 1
  {
   TEXT "$#NAME"
   RECT (1340,1940,1340,1940)
   ALIGN 9
   PARENT 533
  }
  VTX  535, 0, 0
  {
   COORD (1620,1920)
  }
  VTX  536, 0, 0
  {
   COORD (1080,1920)
  }
  WIRE  537, 0, 0
  {
   NET 139
   VTX 535, 536
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  538, 0, 1
  {
   TEXT "$#NAME"
   RECT (1350,1920,1350,1920)
   ALIGN 9
   PARENT 537
  }
  VTX  539, 0, 0
  {
   COORD (1620,1900)
  }
  VTX  540, 0, 0
  {
   COORD (1100,1900)
  }
  WIRE  541, 0, 0
  {
   NET 137
   VTX 539, 540
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  542, 0, 1
  {
   TEXT "$#NAME"
   RECT (1360,1900,1360,1900)
   ALIGN 9
   PARENT 541
  }
  VTX  543, 0, 0
  {
   COORD (1620,1880)
  }
  VTX  544, 0, 0
  {
   COORD (1120,1880)
  }
  WIRE  545, 0, 0
  {
   NET 136
   VTX 543, 544
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  546, 0, 1
  {
   TEXT "$#NAME"
   RECT (1370,1880,1370,1880)
   ALIGN 9
   PARENT 545
  }
  VTX  547, 0, 0
  {
   COORD (1620,1860)
  }
  VTX  548, 0, 0
  {
   COORD (1140,1860)
  }
  WIRE  549, 0, 0
  {
   NET 135
   VTX 547, 548
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  550, 0, 1
  {
   TEXT "$#NAME"
   RECT (1380,1860,1380,1860)
   ALIGN 9
   PARENT 549
  }
  VTX  551, 0, 0
  {
   COORD (1620,1840)
  }
  VTX  552, 0, 0
  {
   COORD (1160,1840)
  }
  WIRE  553, 0, 0
  {
   NET 134
   VTX 551, 552
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  554, 0, 1
  {
   TEXT "$#NAME"
   RECT (1390,1840,1390,1840)
   ALIGN 9
   PARENT 553
  }
  VTX  555, 0, 0
  {
   COORD (1620,1820)
  }
  VTX  556, 0, 0
  {
   COORD (1180,1820)
  }
  WIRE  557, 0, 0
  {
   NET 125
   VTX 555, 556
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  558, 0, 1
  {
   TEXT "$#NAME"
   RECT (1400,1820,1400,1820)
   ALIGN 9
   PARENT 557
  }
  VTX  559, 0, 0
  {
   COORD (1620,1800)
  }
  VTX  560, 0, 0
  {
   COORD (1200,1800)
  }
  WIRE  561, 0, 0
  {
   NET 124
   VTX 559, 560
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  562, 0, 1
  {
   TEXT "$#NAME"
   RECT (1410,1800,1410,1800)
   ALIGN 9
   PARENT 561
  }
  VTX  563, 0, 0
  {
   COORD (1620,1780)
  }
  VTX  564, 0, 0
  {
   COORD (1220,1780)
  }
  WIRE  565, 0, 0
  {
   NET 126
   VTX 563, 564
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  566, 0, 1
  {
   TEXT "$#NAME"
   RECT (1420,1780,1420,1780)
   ALIGN 9
   PARENT 565
  }
  VTX  567, 0, 0
  {
   COORD (1620,1760)
  }
  VTX  568, 0, 0
  {
   COORD (1240,1760)
  }
  WIRE  569, 0, 0
  {
   NET 127
   VTX 567, 568
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  570, 0, 1
  {
   TEXT "$#NAME"
   RECT (1430,1760,1430,1760)
   ALIGN 9
   PARENT 569
  }
  VTX  571, 0, 0
  {
   COORD (1620,1740)
  }
  VTX  572, 0, 0
  {
   COORD (1260,1740)
  }
  WIRE  573, 0, 0
  {
   NET 129
   VTX 571, 572
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  574, 0, 1
  {
   TEXT "$#NAME"
   RECT (1440,1740,1440,1740)
   ALIGN 9
   PARENT 573
  }
  VTX  575, 0, 0
  {
   COORD (1620,1720)
  }
  VTX  576, 0, 0
  {
   COORD (1280,1720)
  }
  WIRE  577, 0, 0
  {
   NET 130
   VTX 575, 576
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  578, 0, 1
  {
   TEXT "$#NAME"
   RECT (1450,1720,1450,1720)
   ALIGN 9
   PARENT 577
  }
  VTX  579, 0, 0
  {
   COORD (1620,1700)
  }
  VTX  580, 0, 0
  {
   COORD (1300,1700)
  }
  WIRE  581, 0, 0
  {
   NET 131
   VTX 579, 580
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  582, 0, 1
  {
   TEXT "$#NAME"
   RECT (1460,1700,1460,1700)
   ALIGN 9
   PARENT 581
  }
  VTX  583, 0, 0
  {
   COORD (1620,1680)
  }
  VTX  584, 0, 0
  {
   COORD (1320,1680)
  }
  WIRE  585, 0, 0
  {
   NET 132
   VTX 583, 584
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  586, 0, 1
  {
   TEXT "$#NAME"
   RECT (1470,1680,1470,1680)
   ALIGN 9
   PARENT 585
  }
  VTX  587, 0, 0
  {
   COORD (1620,1180)
  }
  VTX  588, 0, 0
  {
   COORD (1340,1180)
  }
  WIRE  589, 0, 0
  {
   NET 165
   VTX 587, 588
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  590, 0, 1
  {
   TEXT "$#NAME"
   RECT (1480,1180,1480,1180)
   ALIGN 9
   PARENT 589
  }
  VTX  591, 0, 0
  {
   COORD (880,1240)
  }
  VTX  592, 0, 0
  {
   COORD (1340,1240)
  }
  WIRE  593, 0, 0
  {
   NET 165
   VTX 591, 592
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  594, 0, 1
  {
   TEXT "$#NAME"
   RECT (1110,1240,1110,1240)
   ALIGN 9
   PARENT 593
  }
  VTX  595, 0, 0
  {
   COORD (1620,1260)
  }
  VTX  596, 0, 0
  {
   COORD (1340,1260)
  }
  WIRE  597, 0, 0
  {
   NET 161
   VTX 595, 596
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  598, 0, 1
  {
   TEXT "$#NAME"
   RECT (1480,1260,1480,1260)
   ALIGN 9
   PARENT 597
  }
  VTX  599, 0, 0
  {
   COORD (880,1460)
  }
  VTX  600, 0, 0
  {
   COORD (1340,1460)
  }
  WIRE  601, 0, 0
  {
   NET 161
   VTX 599, 600
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  602, 0, 1
  {
   TEXT "$#NAME"
   RECT (1110,1460,1110,1460)
   ALIGN 9
   PARENT 601
  }
  VTX  603, 0, 0
  {
   COORD (1620,1480)
  }
  VTX  604, 0, 0
  {
   COORD (1340,1480)
  }
  WIRE  605, 0, 0
  {
   NET 149
   VTX 603, 604
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  606, 0, 1
  {
   TEXT "$#NAME"
   RECT (1480,1480,1480,1480)
   ALIGN 9
   PARENT 605
  }
  VTX  607, 0, 0
  {
   COORD (880,2000)
  }
  VTX  608, 0, 0
  {
   COORD (1340,2000)
  }
  WIRE  609, 0, 0
  {
   NET 149
   VTX 607, 608
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  610, 0, 1
  {
   TEXT "$#NAME"
   RECT (1110,2000,1110,2000)
   ALIGN 9
   PARENT 609
  }
  VTX  611, 0, 0
  {
   COORD (1620,1220)
  }
  VTX  612, 0, 0
  {
   COORD (1360,1220)
  }
  WIRE  613, 0, 0
  {
   NET 163
   VTX 611, 612
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  614, 0, 1
  {
   TEXT "$#NAME"
   RECT (1490,1220,1490,1220)
   ALIGN 9
   PARENT 613
  }
  VTX  615, 0, 0
  {
   COORD (880,1320)
  }
  VTX  616, 0, 0
  {
   COORD (1360,1320)
  }
  WIRE  617, 0, 0
  {
   NET 163
   VTX 615, 616
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  618, 0, 1
  {
   TEXT "$#NAME"
   RECT (1120,1320,1120,1320)
   ALIGN 9
   PARENT 617
  }
  VTX  619, 0, 0
  {
   COORD (880,1640)
  }
  VTX  620, 0, 0
  {
   COORD (1360,1640)
  }
  WIRE  621, 0, 0
  {
   NET 156
   VTX 619, 620
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  622, 0, 1
  {
   TEXT "$#NAME"
   RECT (1120,1640,1120,1640)
   ALIGN 9
   PARENT 621
  }
  VTX  623, 0, 0
  {
   COORD (1620,1340)
  }
  VTX  624, 0, 0
  {
   COORD (1360,1340)
  }
  WIRE  625, 0, 0
  {
   NET 156
   VTX 623, 624
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  626, 0, 1
  {
   TEXT "$#NAME"
   RECT (1490,1340,1490,1340)
   ALIGN 9
   PARENT 625
  }
  VTX  627, 0, 0
  {
   COORD (880,2540)
  }
  VTX  628, 0, 0
  {
   COORD (1360,2540)
  }
  WIRE  629, 0, 0
  {
   NET 168
   VTX 627, 628
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  630, 0, 1
  {
   TEXT "$#NAME"
   RECT (1120,2540,1120,2540)
   ALIGN 9
   PARENT 629
  }
  VTX  631, 0, 0
  {
   COORD (1620,1660)
  }
  VTX  632, 0, 0
  {
   COORD (1360,1660)
  }
  WIRE  633, 0, 0
  {
   NET 168
   VTX 631, 632
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  634, 0, 1
  {
   TEXT "$#NAME"
   RECT (1490,1660,1490,1660)
   ALIGN 9
   PARENT 633
  }
  VTX  635, 0, 0
  {
   COORD (880,1400)
  }
  VTX  636, 0, 0
  {
   COORD (1380,1400)
  }
  WIRE  637, 0, 0
  {
   NET 162
   VTX 635, 636
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  638, 0, 1
  {
   TEXT "$#NAME"
   RECT (1130,1400,1130,1400)
   ALIGN 9
   PARENT 637
  }
  VTX  639, 0, 0
  {
   COORD (1620,1240)
  }
  VTX  640, 0, 0
  {
   COORD (1380,1240)
  }
  WIRE  641, 0, 0
  {
   NET 162
   VTX 639, 640
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  642, 0, 1
  {
   TEXT "$#NAME"
   RECT (1500,1240,1500,1240)
   ALIGN 9
   PARENT 641
  }
  VTX  643, 0, 0
  {
   COORD (880,1820)
  }
  VTX  644, 0, 0
  {
   COORD (1380,1820)
  }
  WIRE  645, 0, 0
  {
   NET 152
   VTX 643, 644
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  646, 0, 1
  {
   TEXT "$#NAME"
   RECT (1130,1820,1130,1820)
   ALIGN 9
   PARENT 645
  }
  VTX  647, 0, 0
  {
   COORD (1620,1420)
  }
  VTX  648, 0, 0
  {
   COORD (1380,1420)
  }
  WIRE  649, 0, 0
  {
   NET 152
   VTX 647, 648
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  650, 0, 1
  {
   TEXT "$#NAME"
   RECT (1500,1420,1500,1420)
   ALIGN 9
   PARENT 649
  }
  VTX  651, 0, 0
  {
   COORD (1620,1300)
  }
  VTX  652, 0, 0
  {
   COORD (1400,1300)
  }
  WIRE  653, 0, 0
  {
   NET 159
   VTX 651, 652
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  654, 0, 1
  {
   TEXT "$#NAME"
   RECT (1510,1300,1510,1300)
   ALIGN 9
   PARENT 653
  }
  VTX  655, 0, 0
  {
   COORD (880,1520)
  }
  VTX  656, 0, 0
  {
   COORD (1400,1520)
  }
  WIRE  657, 0, 0
  {
   NET 159
   VTX 655, 656
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  658, 0, 1
  {
   TEXT "$#NAME"
   RECT (1140,1520,1140,1520)
   ALIGN 9
   PARENT 657
  }
  VTX  659, 0, 0
  {
   COORD (880,2180)
  }
  VTX  660, 0, 0
  {
   COORD (1400,2180)
  }
  WIRE  661, 0, 0
  {
   NET 180
   VTX 659, 660
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  662, 0, 1
  {
   TEXT "$#NAME"
   RECT (1140,2180,1140,2180)
   ALIGN 9
   PARENT 661
  }
  VTX  663, 0, 0
  {
   COORD (1620,1540)
  }
  VTX  664, 0, 0
  {
   COORD (1400,1540)
  }
  WIRE  665, 0, 0
  {
   NET 180
   VTX 663, 664
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  666, 0, 1
  {
   TEXT "$#NAME"
   RECT (1510,1540,1510,1540)
   ALIGN 9
   PARENT 665
  }
  VTX  667, 0, 0
  {
   COORD (880,1580)
  }
  VTX  668, 0, 0
  {
   COORD (1420,1580)
  }
  WIRE  669, 0, 0
  {
   NET 157
   VTX 667, 668
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  670, 0, 1
  {
   TEXT "$#NAME"
   RECT (1150,1580,1150,1580)
   ALIGN 9
   PARENT 669
  }
  VTX  671, 0, 0
  {
   COORD (1620,1320)
  }
  VTX  672, 0, 0
  {
   COORD (1420,1320)
  }
  WIRE  673, 0, 0
  {
   NET 157
   VTX 671, 672
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  674, 0, 1
  {
   TEXT "$#NAME"
   RECT (1520,1320,1520,1320)
   ALIGN 9
   PARENT 673
  }
  VTX  675, 0, 0
  {
   COORD (1620,1600)
  }
  VTX  676, 0, 0
  {
   COORD (1420,1600)
  }
  WIRE  677, 0, 0
  {
   NET 174
   VTX 675, 676
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  678, 0, 1
  {
   TEXT "$#NAME"
   RECT (1520,1600,1520,1600)
   ALIGN 9
   PARENT 677
  }
  VTX  679, 0, 0
  {
   COORD (880,2360)
  }
  VTX  680, 0, 0
  {
   COORD (1420,2360)
  }
  WIRE  681, 0, 0
  {
   NET 174
   VTX 679, 680
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  682, 0, 1
  {
   TEXT "$#NAME"
   RECT (1150,2360,1150,2360)
   ALIGN 9
   PARENT 681
  }
  VTX  683, 0, 0
  {
   COORD (880,1760)
  }
  VTX  684, 0, 0
  {
   COORD (1440,1760)
  }
  WIRE  685, 0, 0
  {
   NET 153
   VTX 683, 684
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  686, 0, 1
  {
   TEXT "$#NAME"
   RECT (1160,1760,1160,1760)
   ALIGN 9
   PARENT 685
  }
  VTX  687, 0, 0
  {
   COORD (1620,1400)
  }
  VTX  688, 0, 0
  {
   COORD (1440,1400)
  }
  WIRE  689, 0, 0
  {
   NET 153
   VTX 687, 688
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  690, 0, 1
  {
   TEXT "$#NAME"
   RECT (1530,1400,1530,1400)
   ALIGN 9
   PARENT 689
  }
  VTX  691, 0, 0
  {
   COORD (1620,1440)
  }
  VTX  692, 0, 0
  {
   COORD (1460,1440)
  }
  WIRE  693, 0, 0
  {
   NET 151
   VTX 691, 692
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  694, 0, 1
  {
   TEXT "$#NAME"
   RECT (1540,1440,1540,1440)
   ALIGN 9
   PARENT 693
  }
  VTX  695, 0, 0
  {
   COORD (880,1880)
  }
  VTX  696, 0, 0
  {
   COORD (1460,1880)
  }
  WIRE  697, 0, 0
  {
   NET 151
   VTX 695, 696
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  698, 0, 1
  {
   TEXT "$#NAME"
   RECT (1170,1880,1170,1880)
   ALIGN 9
   PARENT 697
  }
  VTX  699, 0, 0
  {
   COORD (1620,1460)
  }
  VTX  700, 0, 0
  {
   COORD (1480,1460)
  }
  WIRE  701, 0, 0
  {
   NET 150
   VTX 699, 700
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  702, 0, 1
  {
   TEXT "$#NAME"
   RECT (1550,1460,1550,1460)
   ALIGN 9
   PARENT 701
  }
  VTX  703, 0, 0
  {
   COORD (880,1940)
  }
  VTX  704, 0, 0
  {
   COORD (1480,1940)
  }
  WIRE  705, 0, 0
  {
   NET 150
   VTX 703, 704
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  706, 0, 1
  {
   TEXT "$#NAME"
   RECT (1180,1940,1180,1940)
   ALIGN 9
   PARENT 705
  }
  VTX  707, 0, 0
  {
   COORD (1620,1500)
  }
  VTX  708, 0, 0
  {
   COORD (1500,1500)
  }
  WIRE  709, 0, 0
  {
   NET 184
   VTX 707, 708
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  710, 0, 1
  {
   TEXT "$#NAME"
   RECT (1560,1500,1560,1500)
   ALIGN 9
   PARENT 709
  }
  VTX  711, 0, 0
  {
   COORD (880,2060)
  }
  VTX  712, 0, 0
  {
   COORD (1500,2060)
  }
  WIRE  713, 0, 0
  {
   NET 184
   VTX 711, 712
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  714, 0, 1
  {
   TEXT "$#NAME"
   RECT (1190,2060,1190,2060)
   ALIGN 9
   PARENT 713
  }
  VTX  715, 0, 0
  {
   COORD (1620,1520)
  }
  VTX  716, 0, 0
  {
   COORD (1520,1520)
  }
  WIRE  717, 0, 0
  {
   NET 182
   VTX 715, 716
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  718, 0, 1
  {
   TEXT "$#NAME"
   RECT (1570,1520,1570,1520)
   ALIGN 9
   PARENT 717
  }
  VTX  719, 0, 0
  {
   COORD (880,2120)
  }
  VTX  720, 0, 0
  {
   COORD (1520,2120)
  }
  WIRE  721, 0, 0
  {
   NET 182
   VTX 719, 720
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  722, 0, 1
  {
   TEXT "$#NAME"
   RECT (1200,2120,1200,2120)
   ALIGN 9
   PARENT 721
  }
  VTX  723, 0, 0
  {
   COORD (880,2240)
  }
  VTX  724, 0, 0
  {
   COORD (1540,2240)
  }
  WIRE  725, 0, 0
  {
   NET 178
   VTX 723, 724
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  726, 0, 1
  {
   TEXT "$#NAME"
   RECT (1210,2240,1210,2240)
   ALIGN 9
   PARENT 725
  }
  VTX  727, 0, 0
  {
   COORD (1620,1560)
  }
  VTX  728, 0, 0
  {
   COORD (1540,1560)
  }
  WIRE  729, 0, 0
  {
   NET 178
   VTX 727, 728
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  730, 0, 1
  {
   TEXT "$#NAME"
   RECT (1580,1560,1580,1560)
   ALIGN 9
   PARENT 729
  }
  VTX  731, 0, 0
  {
   COORD (1620,1580)
  }
  VTX  732, 0, 0
  {
   COORD (1560,1580)
  }
  WIRE  733, 0, 0
  {
   NET 176
   VTX 731, 732
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  734, 0, 1
  {
   TEXT "$#NAME"
   RECT (1590,1580,1590,1580)
   ALIGN 9
   PARENT 733
  }
  VTX  735, 0, 0
  {
   COORD (880,2300)
  }
  VTX  736, 0, 0
  {
   COORD (1560,2300)
  }
  WIRE  737, 0, 0
  {
   NET 176
   VTX 735, 736
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  738, 0, 1
  {
   TEXT "$#NAME"
   RECT (1220,2300,1220,2300)
   ALIGN 9
   PARENT 737
  }
  VTX  739, 0, 0
  {
   COORD (880,2420)
  }
  VTX  740, 0, 0
  {
   COORD (1580,2420)
  }
  WIRE  741, 0, 0
  {
   NET 172
   VTX 739, 740
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  742, 0, 1
  {
   TEXT "$#NAME"
   RECT (1230,2420,1230,2420)
   ALIGN 9
   PARENT 741
  }
  VTX  743, 0, 0
  {
   COORD (1620,1620)
  }
  VTX  744, 0, 0
  {
   COORD (1580,1620)
  }
  WIRE  745, 0, 0
  {
   NET 172
   VTX 743, 744
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  746, 0, 1
  {
   TEXT "$#NAME"
   RECT (1600,1620,1600,1620)
   ALIGN 9
   PARENT 745
  }
  VTX  747, 0, 0
  {
   COORD (1620,1640)
  }
  VTX  748, 0, 0
  {
   COORD (1600,1640)
  }
  WIRE  749, 0, 0
  {
   NET 170
   VTX 747, 748
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  750, 0, 1
  {
   TEXT "$#NAME"
   RECT (1610,1640,1610,1640)
   ALIGN 9
   PARENT 749
  }
  VTX  751, 0, 0
  {
   COORD (880,2480)
  }
  VTX  752, 0, 0
  {
   COORD (1600,2480)
  }
  WIRE  753, 0, 0
  {
   NET 170
   VTX 751, 752
   VARIABLES
   {
    #NAMED="1"
   }
  }
  TEXT  754, 0, 1
  {
   TEXT "$#NAME"
   RECT (1240,2480,1240,2480)
   ALIGN 9
   PARENT 753
  }
  VTX  755, 0, 0
  {
   COORD (1200,600)
  }
  VTX  756, 0, 0
  {
   COORD (1180,660)
  }
  VTX  757, 0, 0
  {
   COORD (1220,540)
  }
  VTX  758, 0, 0
  {
   COORD (1240,480)
  }
  VTX  759, 0, 0
  {
   COORD (1260,420)
  }
  VTX  760, 0, 0
  {
   COORD (1280,360)
  }
  VTX  761, 0, 0
  {
   COORD (1300,300)
  }
  VTX  762, 0, 0
  {
   COORD (1320,240)
  }
  VTX  763, 0, 0
  {
   COORD (1160,720)
  }
  VTX  764, 0, 0
  {
   COORD (1140,780)
  }
  VTX  765, 0, 0
  {
   COORD (1120,840)
  }
  VTX  766, 0, 0
  {
   COORD (1100,900)
  }
  VTX  767, 0, 0
  {
   COORD (1080,960)
  }
  VTX  768, 0, 0
  {
   COORD (1060,1020)
  }
  VTX  769, 0, 0
  {
   COORD (1040,1080)
  }
  VTX  770, 0, 0
  {
   COORD (2720,1120)
  }
  VTX  771, 0, 0
  {
   COORD (1020,1120)
  }
  WIRE  772, 0, 0
  {
   NET 124
   VTX 228, 755
  }
  WIRE  773, 0, 0
  {
   NET 125
   VTX 224, 756
  }
  WIRE  774, 0, 0
  {
   NET 126
   VTX 232, 757
  }
  WIRE  775, 0, 0
  {
   NET 127
   VTX 236, 758
  }
  WIRE  776, 0, 0
  {
   NET 129
   VTX 240, 759
  }
  WIRE  777, 0, 0
  {
   NET 130
   VTX 244, 760
  }
  WIRE  778, 0, 0
  {
   NET 131
   VTX 248, 761
  }
  WIRE  779, 0, 0
  {
   NET 132
   VTX 252, 762
  }
  WIRE  780, 0, 0
  {
   NET 134
   VTX 220, 763
  }
  WIRE  781, 0, 0
  {
   NET 135
   VTX 216, 764
  }
  WIRE  782, 0, 0
  {
   NET 136
   VTX 212, 765
  }
  WIRE  783, 0, 0
  {
   NET 137
   VTX 208, 766
  }
  WIRE  784, 0, 0
  {
   NET 139
   VTX 204, 767
  }
  WIRE  785, 0, 0
  {
   NET 140
   VTX 200, 768
  }
  WIRE  786, 0, 0
  {
   NET 141
   VTX 196, 769
  }
  BUS  787, 0, 0
  {
   NET 186
   VTX 770, 771
  }
  WIRE  788, 0, 0
  {
   NET 124
   VTX 755, 560
  }
  WIRE  789, 0, 0
  {
   NET 125
   VTX 756, 556
  }
  WIRE  790, 0, 0
  {
   NET 126
   VTX 757, 564
  }
  WIRE  791, 0, 0
  {
   NET 127
   VTX 758, 568
  }
  BUS  792, 0, 0
  {
   NET 128
   VTX 424, 420
  }
  WIRE  793, 0, 0
  {
   NET 129
   VTX 759, 572
  }
  WIRE  794, 0, 0
  {
   NET 130
   VTX 760, 576
  }
  WIRE  795, 0, 0
  {
   NET 131
   VTX 761, 580
  }
  WIRE  796, 0, 0
  {
   NET 132
   VTX 762, 584
  }
  BUS  797, 0, 0
  {
   NET 133
   VTX 436, 440
  }
  WIRE  798, 0, 0
  {
   NET 134
   VTX 763, 552
  }
  WIRE  799, 0, 0
  {
   NET 135
   VTX 764, 548
  }
  WIRE  800, 0, 0
  {
   NET 136
   VTX 765, 544
  }
  WIRE  801, 0, 0
  {
   NET 137
   VTX 766, 540
  }
  BUS  802, 0, 0
  {
   NET 138
   VTX 444, 448
  }
  WIRE  803, 0, 0
  {
   NET 139
   VTX 767, 536
  }
  WIRE  804, 0, 0
  {
   NET 140
   VTX 768, 532
  }
  WIRE  805, 0, 0
  {
   NET 141
   VTX 769, 520
  }
  BUS  806, 0, 0
  {
   NET 142
   VTX 452, 456
  }
  WIRE  807, 0, 0
  {
   NET 143
   VTX 500, 504
  }
  WIRE  808, 0, 0
  {
   NET 144
   VTX 432, 428
  }
  WIRE  809, 0, 0
  {
   NET 145
   VTX 516, 512
  }
  WIRE  810, 0, 0
  {
   NET 146
   VTX 460, 464
  }
  WIRE  811, 0, 0
  {
   NET 147
   VTX 524, 528
  }
  WIRE  812, 0, 0
  {
   NET 148
   VTX 468, 472
  }
  WIRE  813, 0, 0
  {
   NET 149
   VTX 604, 608
  }
  WIRE  814, 0, 0
  {
   NET 150
   VTX 700, 704
  }
  WIRE  815, 0, 0
  {
   NET 151
   VTX 692, 696
  }
  WIRE  816, 0, 0
  {
   NET 152
   VTX 648, 644
  }
  WIRE  817, 0, 0
  {
   NET 153
   VTX 688, 684
  }
  WIRE  818, 0, 0
  {
   NET 154
   VTX 492, 496
  }
  WIRE  819, 0, 0
  {
   NET 156
   VTX 624, 620
  }
  WIRE  820, 0, 0
  {
   NET 157
   VTX 672, 668
  }
  BUS  821, 0, 0
  {
   NET 158
   VTX 408, 404
  }
  WIRE  822, 0, 0
  {
   NET 159
   VTX 652, 656
  }
  WIRE  823, 0, 0
  {
   NET 161
   VTX 596, 600
  }
  WIRE  824, 0, 0
  {
   NET 162
   VTX 640, 636
  }
  WIRE  825, 0, 0
  {
   NET 163
   VTX 612, 616
  }
  WIRE  826, 0, 0
  {
   NET 165
   VTX 588, 592
  }
  WIRE  827, 0, 0
  {
   NET 167
   VTX 412, 416
  }
  WIRE  828, 0, 0
  {
   NET 168
   VTX 632, 628
  }
  WIRE  829, 0, 0
  {
   NET 169
   VTX 352, 348
  }
  WIRE  830, 0, 0
  {
   NET 170
   VTX 748, 752
  }
  WIRE  831, 0, 0
  {
   NET 172
   VTX 744, 740
  }
  WIRE  832, 0, 0
  {
   NET 174
   VTX 676, 680
  }
  WIRE  833, 0, 0
  {
   NET 176
   VTX 732, 736
  }
  WIRE  834, 0, 0
  {
   NET 178
   VTX 728, 724
  }
  WIRE  835, 0, 0
  {
   NET 180
   VTX 664, 660
  }
  WIRE  836, 0, 0
  {
   NET 182
   VTX 716, 720
  }
  WIRE  837, 0, 0
  {
   NET 184
   VTX 708, 712
  }
  BUS  838, 0, 0
  {
   NET 186
   VTX 770, 188
  }
  BUS  839, 0, 0
  {
   NET 186
   VTX 188, 192
  }
  BUS  840, 0, 0
  {
   NET 186
   VTX 771, 508
  }
 }
 
}

